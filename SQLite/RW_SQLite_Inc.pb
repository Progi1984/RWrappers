XIncludeFile "RW_SQLite_Res.pb"

ImportC "sqlite3.lib"
  sqlite3_aggregate_context.l(*sqlite3_context.l, nBytes.l) As "_sqlite3_aggregate_context"
  sqlite3_aggregate_count.l(*sqlite3_context.l) As "_sqlite3_aggregate_count"
  sqlite3_auto_extension.l(*xEntryPoint.l) As "_sqlite3_auto_extension"
  sqlite3_bind_blob.l(*sqlite3_stmt.l, int1.l, *const, n.l, *void.l) As "_sqlite3_bind_blob"
  sqlite3_bind_double.l(*sqlite3_stmt.l, int1.l, double.d) As "_sqlite3_bind_double"
  sqlite3_bind_int.l(*sqlite3_stmt.l, int1.l, int2.l) As "_sqlite3_bind_int"
  sqlite3_bind_int64.l(*sqlite3_stmt.l, int1.l, int2.d) As "_sqlite3_bind_int64"
  sqlite3_bind_null.l(*sqlite3_stmt.l, int1.l) As "_sqlite3_bind_null"
  sqlite3_bind_parameter_count.l(*sqlite3_stmt.l) As "_sqlite3_bind_parameter_count"
  sqlite3_bind_parameter_index.l(*sqlite3_stmt.l, name.p-utf8) As "_sqlite3_bind_parameter_index"
  sqlite3_bind_parameter_name.l(*sqlite3_stmt.l, n.l) As "_sqlite3_bind_parameter_name"
  sqlite3_bind_text.l(*sqlite3_stmt.l, int1.l, *char.l, n.l, *void.l) As "_sqlite3_bind_text"
  sqlite3_bind_text16.l(*sqlite3_stmt.l, int1.l, *void1.l, int2.l, *void2.l) As "_sqlite3_bind_text16"
  sqlite3_bind_value.l(*sqlite3_stmt.l, int1.l, *sqlite3_value.l) As "_sqlite3_bind_value"
  sqlite3_bind_zeroblob.l(*sqlite3_stmt.l, int1.l, n.l) As "_sqlite3_bind_zeroblob"
  sqlite3_blob_bytes.l(*sqlite3_blob.l) As "_sqlite3_blob_bytes"
  sqlite3_blob_close.l(*sqlite3_blob.l) As "_sqlite3_blob_close"
  sqlite3_blob_open.l(*sqlite3.l, zDB.p-utf8, zTable.p-utf8, zColumn.p-utf8, iRow.d, flags.l, *ppBlob.l) As "_sqlite3_blob_open"
  sqlite3_blob_read.l(*sqlite3_blob.l, *Z.l, N.l, iOffset.l) As "_sqlite3_blob_read"
  sqlite3_blob_write.l(*sqlite3_blob.l, *Z.l, N.l, iOffset.l) As "_sqlite3_blob_write"
  sqlite3_busy_handler.l(*sqlite3.l, *int.l, *void.l) As "_sqlite3_busy_handler"
  sqlite3_busy_timeout.l(*sqlite3.l, ms.l) As "_sqlite3_busy_timeout"
  sqlite3_changes.l(*sqlite3.l) As "_sqlite3_changes"
  sqlite3_clear_bindings.l(*sqlite3_stmt.l) As "_sqlite3_clear_bindings"
  sqlite3_close.l(*sqlite3.l) As "_sqlite3_close"
  sqlite3_collation_needed.l(*sqlite3.l, *void1, *void2) As "_sqlite3_collation_needed"
  sqlite3_collation_needed16.l(*sqlite3.l, *void1, *void2) As "_sqlite3_collation_needed16"
  sqlite3_column_blob.l(*sqlite3_stmt.l, iCol.l) As "_sqlite3_column_blob"
  sqlite3_column_bytes.l(*sqlite3_stmt.l, iCol.l) As "_sqlite3_column_bytes"
  sqlite3_column_bytes16.l(*sqlite3_stmt.l, iCol.l) As "_sqlite3_column_bytes16"
  sqlite3_column_count.l(*sqlite3_stmt.l) As "_sqlite3_column_count"
  sqlite3_column_decltype.l(*sqlite3_stmt.l, i.l) As "_sqlite3_column_decltype"
  sqlite3_column_decltype16.l(*sqlite3_stmt.l, i.l) As "_sqlite3_column_decltype16"
  sqlite3_column_double.d(*sqlite3_stmt.l, iCol.l) As "_sqlite3_column_double"
  sqlite3_column_int.l(*sqlite3_stmt.l, iCol.l) As "_sqlite3_column_int"
  sqlite3_column_int64.d(*sqlite3_stmt.l, iCol.l) As "_sqlite3_column_int64"
  sqlite3_column_name.l(*sqlite3_stmt.l, n.l) As "_sqlite3_column_name"
  sqlite3_column_name16.l(*sqlite3_stmt.l, n.l) As "_sqlite3_column_name16"
  sqlite3_column_text.l(*sqlite3_stmt.l, iCol.l) As "_sqlite3_column_text"
  sqlite3_column_text16.l(*sqlite3_stmt.l, iCol.l) As "_sqlite3_column_text16"
  sqlite3_column_type.l(*sqlite3_stmt.l, iCol.l) As "_sqlite3_column_type"
  sqlite3_column_value.l(*sqlite3_stmt.l, iCol.l) As "_sqlite3_column_value"
  sqlite3_commit_hook.l(*sqlite3.l, *xCallback.l, *pArg.l) As "_sqlite3_commit_hook"
  sqlite3_complete.l(sql.p-utf8) As "_sqlite3_complete"
  sqlite3_complete16.l(sql.p-unicode) As "_sqlite3_complete16"
  sqlite3_config.l(int.l) As "_sqlite3_config"
  sqlite3_context_db_handle.l(*sqlite3_context.l) As "_sqlite3_context_db_handle"
  sqlite3_create_collation.l(*sqlite3.l, name.p-utf8, pref16.l, *void.l, *xCompare.l) As "_sqlite3_create_collation"
  sqlite3_create_collation16.l(*sqlite3.l, name.p-unicode, pref16.l, *void.l, *xCompare.l, *xDestroy.l) As "_sqlite3_create_collation16"
  sqlite3_create_collation_v2.l(*sqlite3.l, name.p-utf8, pref16.l, *void.l, *xCompare.l) As "_sqlite3_create_collation_v2"
  sqlite3_create_function.l(*sqlite3.l, FunctionName.p-utf8, nArg.l, eTextRep.l, *pUserData.l, *xFunc.l, *xStep.l, *xFinal.l) As "_sqlite3_create_function"
  sqlite3_create_function16.l(*sqlite3.l, FunctionName.p-unicode, nArg.l, eTextRep.l, *pUserData.l, *xFunc.l, *xStep.l, *xFinal.l) As "_sqlite3_create_function16"
  sqlite3_create_module.l(*sqlite3.l, zName.p-utf8, *void.sqlite3_module, *data_.l) As "_sqlite3_create_module"
  sqlite3_create_module_v2.l(*sqlite3.l, zName.p-utf8, *void.sqlite3_module, *data_.l, *xDestroy.l) As "_sqlite3_create_module_v2"
  sqlite3_data_count.l(*sqlite3_stmt.l) As "_sqlite3_data_count"
  sqlite3_db_handle.l(*sqlite3_stmt.l) As "_sqlite3_db_handle"
  sqlite3_declare_vtab.l(*sqlite3.l, zCreateTable.p-utf8) As "_sqlite3_declare_vtab"
  sqlite3_enable_load_extension(*sqlite3.l, onoff.l) As "_sqlite3_enable_load_extension"
  sqlite3_enable_shared_cache.l(int.l) As "_sqlite3_enable_shared_cache"
  sqlite3_errcode.l(*sqlite3.l) As "_sqlite3_errcode"
  sqlite3_errmsg.l(*sqlite3.l) As "_sqlite3_errmsg"
  sqlite3_errmsg16.l(*sqlite3.l) As "_sqlite3_errmsg16"
  sqlite3_exec.l(*sqlite3.l, sql.p-utf8, *callback.l, *argument.l, *errmsg.l) As "_sqlite3_exec"
  sqlite3_expired.l(*sqlite3_stmt.l) As "_sqlite3_expired"
  sqlite3_extended_result_codes.l(*sqlite3.l, onoff.l) As "_sqlite3_extended_result_codes"
  sqlite3_file_control.l(*sqlite3.l, zDbName.p-utf8, op.l, *void) As "_sqlite3_file_control"
  sqlite3_finalize.l(*sqlite3_stmt.l) As "_sqlite3_finalize"
  sqlite3_free.l(*void.l) As "_sqlite3_free"
  sqlite3_free_table(*result.l) As "_sqlite3_free_table"
  sqlite3_get_autocommit.l(*sqlite3.l) As "_sqlite3_get_autocommit"
  sqlite3_get_auxdata.l(*sqlite3.l,int.l) As "_sqlite3_get_auxdata"
  sqlite3_get_table.l(*sqlite3.l, sql.p-utf8, *resultp.l, *nrow.l, *ncolumn.l, *errmsg.l) As "_sqlite3_get_table"
  sqlite3_global_recover.l() As "_sqlite3_global_recover"
  sqlite3_initialize.l() As "_sqlite3_initialize"
  sqlite3_interrupt.l(*sqlite3.l) As "_sqlite3_interrupt"
  sqlite3_last_insert_rowid.d(*sqlite3.l) As "_sqlite3_last_insert_rowid"
  sqlite3_libversion.l() As "_sqlite3_libversion"
  sqlite3_libversion_number.l() As "_sqlite3_libversion_number"
  sqlite3_limit.l(*sqlite3.l, id.l, newVal.l) As "_sqlite3_limit"
  sqlite3_load_extension.l(*sqlite3.l, zFile.p-utf8, zProc.p-utf8, *pzErrMsg.l) As "_sqlite3_load_extension"
  sqlite3_malloc.l(int.l) As "_sqlite3_malloc"
  sqlite3_memory_alarm.l(*void1.l, *void2.l, param.d) As "_sqlite3_memory_alarm"
  sqlite3_memory_highwater.d(resetFlag.l) As "_sqlite3_memory_highwater"
  sqlite3_memory_used.d() As "_sqlite3_memory_used"
  sqlite3_mprintf.l(char.p-utf8) As "_sqlite3_mprintf"
  sqlite3_mutex_alloc.l(int.l) As "_sqlite3_mutex_alloc"
  sqlite3_mutex_enter.l(*sqlite3_mutex) As "_sqlite3_mutex_enter"
  sqlite3_mutex_free.l(*sqlite3_mutex) As "_sqlite3_mutex_free"
  sqlite3_mutex_leave.l(*sqlite3_mutex) As "_sqlite3_mutex_leave"
  sqlite3_mutex_try.l(*sqlite3_mutex) As "_sqlite3_mutex_try"
  sqlite3_next_stmt.l(*sqlite3.l, *sqlite3_stmt.l) As "_sqlite3_next_stmt"
  sqlite3_open.l(filename.p-utf8, *handle.l) As "_sqlite3_open"
  sqlite3_open16.l(filename.p-unicode, *handle.l) As "_sqlite3_open16"
  sqlite3_open_v2.l(filename.p-utf8, *handle.l, flags.l, zVfs.s) As "_sqlite3_open_v2"
  sqlite3_os_end.l() As "_sqlite3_os_end"
  sqlite3_os_init.l() As "_sqlite3_os_init"
  sqlite3_overload_function.l(*sqlite3.l, zFuncName.p-utf8, nArg.l) As "_sqlite3_overload_function"
  sqlite3_prepare.l(*sqlite3.l, sql.p-utf8, nBytes.l, *sqlite3_stmt.l, *pzTail.l) As "_sqlite3_prepare"
  sqlite3_prepare16.l(*sqlite3.l, sql.p-utf8, nBytes.l, *sqlite3_stmt.l, *pzTail.l) As "_sqlite3_prepare16"
  sqlite3_prepare16_v2.l(*sqlite3.l, sql.p-unicode, nBytes.l, *sqlite3_stmt.l, *pzTail.l) As "_sqlite3_prepare16_v2"
  sqlite3_prepare_v2.l(*sqlite3.l, sql.p-unicode, nBytes.l, *sqlite3_stmt.l, *pzTail.l) As "_sqlite3_prepare_v2"
  sqlite3_profile.l(*sqlite3.l, *xProfile.l, *void.l) As "_sqlite3_profile"
  sqlite3_progress_handler.l(*sqlite3.l, int.l, *void1, *void2) As "_sqlite3_progress_handler"
  sqlite3_randomness.l(N.l, *P.l) As "_sqlite3_randomness"
  sqlite3_realloc.l(*void.l, int.l) As "_sqlite3_realloc"
  sqlite3_release_memory.l(n.l) As "_sqlite3_release_memory"
  sqlite3_reset.l(*sqlite3_stmt.l) As "_sqlite3_reset"
  sqlite3_reset_auto_extension.l() As "_sqlite3_reset_auto_extension"
  sqlite3_result_blob.l(*sqlite3_context.l, *const, n.l, *void) As "_sqlite3_result_blob"
  sqlite3_result_double.l(*sqlite3_context.l, double.d) As "_sqlite3_result_double"
  sqlite3_result_error.l(*sqlite3_context.l, *char.l, int.l) As "_sqlite3_result_error"
  sqlite3_result_error16.l(*sqlite3_context.l, *void.l, int.l) As "_sqlite3_result_error16"
  sqlite3_result_error_code.l(*sqlite3_context.l, int.l) As "_sqlite3_result_error_code"
  sqlite3_result_error_nomem.l(*sqlite3_context.l) As "_sqlite3_result_error_nomem"
  sqlite3_result_error_toobig.l(*sqlite3_context.l) As "_sqlite3_result_error_toobig"
  sqlite3_result_int.l(*sqlite3_context.l, int.l) As "_sqlite3_result_int"
  sqlite3_result_int64.l(*sqlite3_context.l, int.d) As "_sqlite3_result_int64"
  sqlite3_result_null.l(*sqlite3_context.l) As "_sqlite3_result_null"
  sqlite3_result_text.l(*sqlite3_context.l, *char.l, n.l, *void.l) As "_sqlite3_result_text"
  sqlite3_result_text16.l(*sqlite3_context.l, *void1.l, n.l, *void2.l) As "_sqlite3_result_text16"
  sqlite3_result_text16be.l(*sqlite3_context.l, *void1.l, n.l, *void2.l) As "_sqlite3_result_text16be"
  sqlite3_result_text16le.l(*sqlite3_context.l, *void1.l, n.l, *void2.l) As "_sqlite3_result_text16le"
  sqlite3_result_value.l(*sqlite3_context.l, *sqlite3_value.l) As "_sqlite3_result_value"
  sqlite3_result_zeroblob.l(*sqlite3_context.l, n.l) As "_sqlite3_result_zeroblob"
  sqlite3_rollback_hook.l(*sqlite3.l, *void1.l, *void2.l) As "_sqlite3_rollback_hook"
  sqlite3_set_authorizer.l(*sqlite3.l, *xAuth.l, *pUserData.l) As "_sqlite3_set_authorizer"
  sqlite3_set_auxdata.l(*sqlite3.l, int.l, *void1.l, *void2.l) As "_sqlite3_set_auxdata"
  sqlite3_shutdown.l() As "_sqlite3_shutdown"
  sqlite3_sleep.l(int.l) As "_sqlite3_sleep"
  sqlite3_snprintf(int.l, *char.l, *const.l) As "_sqlite3_snprintf"
  sqlite3_soft_heap_limit.l(n.l) As "_sqlite3_soft_heap_limit"
  sqlite3_sql.l(*sqlite3_stmt.l) As "_sqlite3_sql"
  sqlite3_status.l(op.l, *pCurrent.l, *pHighwater.l, resetFlag.l) As "_sqlite3_status"
  sqlite3_step.l(*sqlite3_stmt.l) As "_sqlite3_step"
  sqlite3_test_control.l(op.l) As "_sqlite3_test_control"
  sqlite3_thread_cleanup.l() As "_sqlite3_thread_cleanup"
  sqlite3_threadsafe.l() As "_sqlite3_threadsafe"
  sqlite3_total_changes.l(*sqlite3.l) As "_sqlite3_total_changes"
  sqlite3_trace.l(*sqlite3.l, *xTrace.l, *void.l) As "_sqlite3_trace"
  sqlite3_transfer_bindings.l(*sqlite3_stmt.l, *sqlite3_stmt2.l) As "_sqlite3_transfer_bindings"
  sqlite3_update_hook.l(*sqlite3.l, *void1.l, *void2.l) As "_sqlite3_update_hook"
  sqlite3_user_data.l(*sqlite3_context.l) As "_sqlite3_user_data"
  sqlite3_value_blob.l(*sqlite3_value.l) As "_sqlite3_value_blob"
  sqlite3_value_bytes.l(*sqlite3_value.l) As "_sqlite3_value_bytes"
  sqlite3_value_bytes16.l(*sqlite3_value.l) As "_sqlite3_value_bytes16"
  sqlite3_value_double.d(*sqlite3_value.l) As "_sqlite3_value_double"
  sqlite3_value_int.l(*sqlite3_value.l) As "_sqlite3_value_int"
  sqlite3_value_int64.d(*sqlite3_value.l) As "_sqlite3_value_int64"
  sqlite3_value_numeric_type.l(*sqlite3_value.l) As "_sqlite3_value_numeric_type"
  sqlite3_value_text.l(*sqlite3_value.l) As "_sqlite3_value_text"
  sqlite3_value_text16.l(*sqlite3_value.l) As "_sqlite3_value_text16"
  sqlite3_value_text16be.l(*sqlite3_value.l) As "_sqlite3_value_text16be"
  sqlite3_value_text16le.l(*sqlite3_value.l) As "_sqlite3_value_text16le"
  sqlite3_value_type.l(*sqlite3_value.l) As "_sqlite3_value_type"
  sqlite3_version() As "_sqlite3_version"
  sqlite3_vfs_find.l(zVfsName.p-utf8) As "_sqlite3_vfs_find"
  sqlite3_vfs_register.l(*sqlite3_vfs, makeDflt.l) As "_sqlite3_vfs_register"
  sqlite3_vfs_unregister.l(*sqlite3_vfs) As "_sqlite3_vfs_unregister"
  sqlite3_vmprintf.l(char.p-utf8, *va_list.l) As "_sqlite3_vmprintf"
EndImport



; IDE Options = PureBasic 4.20 (Windows - x86)
; CursorPosition = 164
; FirstLine = 126
; Folding = -
; EnableXP
; UseMainFile = SQLite_Ex0.pb