XIncludeFile "RW_PostGreSQL_Res.pb"
ImportC "C:\ZPerso\RW\Next\pgsql\lib\libpq.lib"
  PQconnectdb.PGconn(conninfo.s) As "_PQconnectdb"
  PQsetdbLogin(pghost.s, pgport.s, pgoptions.s, pgtty.s, dbName.s, login.s, pwd.s) As "_PQsetdbLogin"
  PQconndefaults() As "_PQconndefaults"
  PQfinish(conn.PGconn) As "_PQfinish"
  PQreset(conn.PGconn) As "_PQreset"
  PQrequestCancel(conn.PGconn) As "_PQrequestCancel"
  PQdb(conn.PGconn) As "_PQdb"
  PQuser(conn.PGconn) As "_PQuser"
  PQpass(conn.PGconn) As "_PQpass"
  PQhost(conn.PGconn) As "_PQhost"
  PQport(conn.PGconn) As "_PQport"
  PQtty(conn.PGconn) As "_PQtty"
  PQoptions(conn.PGconn) As "_PQoptions"
 PQstatus.ConnStatusType(*conn) As "_PQstatus"
  PQerrorMessage(conn.PGconn) As "_PQerrorMessage"
  PQsocket(conn.PGconn) As "_PQsocket"
  PQbackendPID(conn.PGconn) As "_PQbackendPID"
  PQtrace(conn.PGconn, debug_port.l) As "_PQtrace"
  PQuntrace(conn.PGconn) As "_PQuntrace"
  PQsetNoticeProcessor.PQnoticeProcessor(conn.PGconn, proc.PQnoticeProcessor, arg.l) As "_PQsetNoticeProcessor"
  PQexec.PGresult(conn.PGconn, query.s) As "_PQexec"
  PQnotifies(conn.PGconn) As "_PQnotifies"
  PQsendQuery(conn.PGconn, query.s) As "_PQsendQuery"
  PQgetResult.PGresult(conn.PGconn) As "_PQgetResult"
  PQisBusy(conn.PGconn) As "_PQisBusy"
  PQconsumeInput(conn.PGconn) As "_PQconsumeInput"
  PQgetline(conn.PGconn, string.s, length.l) As "_PQgetline"
  PQputline(conn.PGconn, string.s) As "_PQputline"
  PQgetlineAsync(conn.PGconn, buffer.s, bufsize.l) As "_PQgetlineAsync"
  PQputnbytes(conn.PGconn, buffer.s, nbytes.l) As "_PQputnbytes"
  PQendcopy(conn.PGconn) As "_PQendcopy"
  PQfn(conn.PGconn, fnid.l, *result_buf.l, *result_len.l, result_is_int.l, *args.PQArgBlock, nargs.l) As "_PQfn"
  PQresultStatus.ExecStatusType(res.PGresult) As "_PQresultStatus"
  PQntuples(res.PGresult) As "_PQntuples"
  PQnfields(res.PGresult) As "_PQnfields"
  PQbinaryTuples(res.PGresult) As "_PQbinaryTuples"
  PQfname(res.PGresult, field_num.l) As "_PQfname"
  PQfnumber(res.PGresult, field_name.s) As "_PQfnumber"
  PQftype(res.PGresult, field_num.l) As "_PQftype"
  PQfsize(res.PGresult, field_num.l) As "_PQfsize"
  PQfmod(res.PGresult, field_num.l) As "_PQfmod"
  PQcmdStatus(res.PGresult) As "_PQcmdStatus"
  PQoidStatus(res.PGresult) As "_PQoidStatus"
  PQcmdTuples(res.PGresult) As "_PQcmdTuples"
  PQgetvalue(res.PGresult, tup_num.l, field_num.l) As "_PQgetvalue"
  PQgetlength(res.PGresult, tup_num.l, field_num.l) As "_PQgetlength"
  PQgetisnull(res.PGresult, tup_num.l, field_num.l) As "_PQgetisnull"
  PQclear(res.PGresult) As "_PQclear"
  PQmakeEmptyPGresult.PGresult(conn.PGconn, status.ExecStatusType) As "_PQmakeEmptyPGresult"
  PQprint(fout.l, res.PGresult, *ps.PQprintOpt) As "_PQprint"
  PQdisplayTuples(res.PGresult, fp.l, fillAlign.l, fieldSep.s, printHeader.l, quiet.l) As "_PQdisplayTuples"
  PQprintTuples(res.PGresult, fout.l, printAttName.l, terseOutput.l, width.l) As "_PQprintTuples"
  lo_open(conn.PGconn, lobjId.l, mode.l) As "_lo_open"
  lo_close(conn.PGconn, fd.l) As "_lo_close"
  lo_read(conn.PGconn, fd.l, *buf.s, len.l) As "_lo_read"
  lo_write(conn.PGconn, fd.l, buf.s, len.l) As "_lo_write"
  lo_lseek(conn.PGconn, fd.l, offset.l, whence.l) As "_lo_lseek"
  lo_creat(conn.PGconn, mode.l) As "_lo_creat"
  lo_tell(conn.PGconn, fd.l) As "_lo_tell"
  lo_unlink(conn.PGconn, lobjId.l) As "_lo_unlink"
  lo_import(conn.PGconn, filename.s) As "_lo_import"
  lo_export(conn.PGconn, lobjId.l, filename.s) As "_lo_export"
;   pgresStatus() As "_pgresStatus"
  PQmblen(s.s, encoding.l) As "_PQmblen"
  PQresultErrorMessage(res.PGresult) As "_PQresultErrorMessage"
  PQresStatus(status.ExecStatusType) As "_PQresStatus"
;   termPQExpBuffer() As "_termPQExpBuffer"
;   appendPQExpBufferChar() As "_appendPQExpBufferChar"
;   initPQExpBuffer() As "_initPQExpBuffer"
;   resetPQExpBuffer() As "_resetPQExpBuffer"
  PQoidValue(res.PGresult) As "_PQoidValue"
  PQclientEncoding(conn.PGconn) As "_PQclientEncoding"
  PQenv2encoding() As "_PQenv2encoding"
;   appendBinaryPQExpBuffer() As "_appendBinaryPQExpBuffer"
;   appendPQExpBufferStr() As "_appendPQExpBufferStr"
;   destroyPQExpBuffer() As "_destroyPQExpBuffer"
;   createPQExpBuffer() As "_createPQExpBuffer"
;   PQconninfoFree() As "_PQconninfoFree"
  PQconnectPoll.PostgresPollingStatusType(conn.PGconn) As "_PQconnectPoll"
  PQconnectStart.PGconn(conninfo.s) As "_PQconnectStart"
  PQflush(conn.PGconn) As "_PQflush"
  PQisnonblocking(conn.PGconn) As "_PQisnonblocking"
  PQresetPoll.PostgresPollingStatusType(conn.PGconn) As "_PQresetPoll"
  PQresetStart.l(conn.PGconn) As "_PQresetStart"
  PQsetClientEncoding(conn.PGconn, encoding.s) As "_PQsetClientEncoding"
  PQsetnonblocking(conn.PGconn, arg.l) As "_PQsetnonblocking"
;   PQfreeNotify() As "_PQfreeNotify"
  PQescapeString(to_.s, from_.s, length.l) As "_PQescapeString"
  PQescapeBytea(from.s, from_length.l, to_length.l) As "_PQescapeBytea"
;   printfPQExpBuffer() As "_printfPQExpBuffer"
;   appendPQExpBuffer() As "_appendPQExpBuffer"
  pg_encoding_to_char(encoding.l) As "_pg_encoding_to_char"
  pg_utf_mblen(utf.s) As "_pg_utf_mblen"
  PQunescapeBytea(strtext.s, *retbuflen.l) As "_PQunescapeBytea"
  PQfreemem(*ptr) As "_PQfreemem"
  PQtransactionStatus.PGTransactionStatusType(conn.PGconn) As "_PQtransactionStatus"
  PQparameterStatus(conn.PGconn, paramName.s) As "_PQparameterStatus"
  PQprotocolVersion(conn.PGconn) As "_PQprotocolVersion"
  PQsetErrorVerbosity.PGVerbosity(conn.PGconn, verbosity.PGVerbosity) As "_PQsetErrorVerbosity"
  PQsetNoticeReceiver.PQnoticeReceiver(conn.PGconn, proc.PQnoticeReceiver, arg.l) As "_PQsetNoticeReceiver"
  PQexecParams.PGresult(conn.PGconn, command.s, nParams.l, paramTypes.l, *paramValues, *paramLengths.l, *paramFormats.l, resultFormat.l) As "_PQexecParams"
  PQsendQueryParams(conn.PGconn, command.s, nParams.l, paramTypes.l, *paramValues, *paramLengths.l, *paramFormats.l, resultFormat.l) As "_PQsendQueryParams"
  PQputCopyData(conn.PGconn, buffer.s, nbytes.l) As "_PQputCopyData"
  PQputCopyEnd(conn.PGconn, errormsg.s) As "_PQputCopyEnd"
  PQgetCopyData(conn.PGconn, *buffer.s, async.l) As "_PQgetCopyData"
  PQresultErrorField(res.PGresult) As "_PQresultErrorField"
  PQftable(res.PGresult, field_num.l) As "_PQftable"
  PQftablecol(res.PGresult, field_num.l) As "_PQftablecol"
  PQfformat(res.PGresult, field_num.l) As "_PQfformat"
  PQexecPrepared.PGresult(conn.PGconn, stmtName.s, nParams.l, *paramValues, *paramLengths.l, *paramFormats.l, resultFormat.l) As "_PQexecPrepared"
  PQsendQueryPrepared(conn.PGconn, stmtName.s, nParams.l, *paramValues, *paramLengths.l, *paramFormats.l, resultFormat.l) As "_PQsendQueryPrepared"
  PQdsplen(s.s, encoding.l) As "_PQdsplen"
  PQserverVersion(conn.PGconn) As "_PQserverVersion"
  PQgetssl(conn.PGconn) As "_PQgetssl"
  pg_char_to_encoding(name.s) As "_pg_char_to_encoding"
  pg_valid_server_encoding(name.s) As "_pg_valid_server_encoding"
  pqsignal(signo.l, *func) As "_pqsignal"
  PQprepare.PGresult(conn.PGconn, stmtName.s, query.s, nParams.l, *paramTypes) As "_PQprepare"
  PQsendPrepare(conn.PGconn, stmtName.s, query.s, nParams.l, *paramTypes) As "_PQsendPrepare"
  PQgetCancel(conn.PGconn) As "_PQgetCancel"
  PQfreeCancel(cancel.PGcancel) As "_PQfreeCancel"
  PQcancel(cancel.PGCancel, *errbuf.s, errbufsize.l) As "_PQcancel"
  lo_create(conn.PGconn, lobjId.l) As "_lo_create"
  PQinitSSL(do_init.l) As "_PQinitSSL"
  PQregisterThreadLock(*newhandler.pgthreadlock_t) As "_PQregisterThreadLock"
  PQescapeStringConn(conn.PGconn, to_.s, from_.s, length.l, error.l) As "_PQescapeStringConn"
  PQescapeByteaConn(conn.PGconn, from_.s, from_length.l, to_length.l) As "_PQescapeByteaConn"
  PQencryptPassword(passwd.s, user.s) As "_PQencryptPassword"
  PQisthreadsafe() As "_PQisthreadsafe"
  enlargePQExpBuffer(*str, needed.l) As "_enlargePQExpBuffer"
  PQnparams(res.PGresult) As "_PQnparams"
  PQparamtype(res.PGresult, param_num.l) As "_PQparamtype"
  PQdescribePrepared.PGresult(conn.PGconn, stmt.s) As "_PQdescribePrepared"
  PQdescribePortal.PGresult(conn.PGconn, portal.s) As "_PQdescribePortal"
  PQsendDescribePrepared(conn.PGconn, stmt.s) As "_PQsendDescribePrepared"
  PQsendDescribePortal(conn.PGconn, portal.s) As "_PQsendDescribePortal"
  lo_truncate(conn.PGconn, fd.l, len.l) As "_lo_truncate"
  PQconnectionUsedPassword(conn.PGconn) As "_PQconnectionUsedPassword"
  pg_valid_server_encoding_id(encoding.l) As "_pg_valid_server_encoding_id"
  PQconnectionNeedsPassword(conn.PGconn) As "_PQconnectionNeedsPassword"
EndImport

; IDE Options = PureBasic 4.20 (Windows - x86)
; CursorPosition = 143
; FirstLine = 100
; Folding = -
; EnableUnicode