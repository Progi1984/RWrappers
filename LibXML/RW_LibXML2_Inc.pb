XIncludeFile "RW_LibXML2_Res.pb"

ImportC "libxml2.lib"
  ;->DOCBparser: old DocBook SGML parser
  docbFreeParserCtxt(ctxt.l) As "_docbFreeParserCtxt"
  docbParseDoc(cur.l, encoding.l) As "_docbParseDoc"
  docbCreateFileParserCtxt(filename.l, encoding.l) As "_docbCreateFileParserCtxt"
  docbSAXParseFile(filename.l, encoding.l, sax.l, userData.l) As "_docbSAXParseFile"
  docbSAXParseDoc(cur.l, encoding.l, sax.l, userData.l) As "_docbSAXParseDoc"
  docbCreatePushParserCtxt(sax.l, user_data.l, chunk.l, size.l, filename.l, enc.l) As "_docbCreatePushParserCtxt"
  docbEncodeEntities(out.l, outlen.l, in.l, inlen.l, quoteChar.l) As "_docbEncodeEntities"
  docbParseFile(filename.l, encoding.l) As "_docbParseFile"
  docbParseDocument(ctxt.l) As "_docbParseDocument"
  docbParseChunk(ctxt.l, chunk.l, size.l, terminate.l) As "_docbParseChunk"
  ;->HTMLparser: Interface For an HTML 4.0 non-verifying parser
  UTF8ToHtml(out.l, outlen.l, in.l, inlen.l) As "_UTF8ToHtml"
  htmlAttrAllowed(elt.l, attr.l, legacy.l) As "_htmlAttrAllowed"
  htmlAutoCloseTag(doc.l, name.l, elem.l) As "_htmlAutoCloseTag"
  htmlCreateMemoryParserCtxt(buffer.l, size.l) As "_htmlCreateMemoryParserCtxt"
  htmlCreatePushParserCtxt(sax.l, user_data.l, chunk.l, size.l, filename.l, enc.l) As "_htmlCreatePushParserCtxt"
  htmlCtxtReadDoc(ctxt.l, cur.l, URL.l, encoding.l, options.l) As "_htmlCtxtReadDoc"
  htmlCtxtReadFd(ctxt.l, fd.l, URL.l, encoding.l, options.l) As "_htmlCtxtReadFd"
  htmlCtxtReadFile(ctxt.l, filename.l, encoding.l, options.l) As "_htmlCtxtReadFile"
  htmlCtxtReadIO(ctxt.l, ioread.l, ioclose.l, ioctx.l, URL.l, encoding.l, options.l) As "_htmlCtxtReadIO"
  htmlCtxtReadMemory(ctxt.l, buffer.l, size.l, URL.l, encoding.l, options.l) As "_htmlCtxtReadMemory"
  htmlCtxtReset(ctxt.l) As "_htmlCtxtReset"
  htmlCtxtUseOptions(ctxt.l, options.l) As "_htmlCtxtUseOptions"
  htmlElementAllowedHere(parent.l, elt.l) As "_htmlElementAllowedHere"
  htmlElementStatusHere(parent.l, elt.l) As "_htmlElementStatusHere"
  htmlEncodeEntities(out.l, outlen.l, in.l, inlen.l) As "_htmlEncodeEntities"
  htmlEntityLookup(name.l) As "_htmlEntityLookup"
  htmlEntityValueLookup(value.l) As "_htmlEntityValueLookup"
  htmlFreeParserCtxt(ctxt.l) As "_htmlFreeParserCtxt"
  htmlHandleOmittedElem(val.l) As "_htmlHandleOmittedElem"
  htmlIsAutoClosed(doc.l, elem.l) As "_htmlIsAutoClosed"
  htmlIsScriptAttribute(name.l) As "_htmlIsScriptAttribute"
  htmlNewParserCtxt() As "_htmlNewParserCtxt"
  htmlNodeStatus(node.l, legacy.l) As "_htmlNodeStatus"
  htmlParseCharRef(ctxt.l) As "_htmlParseCharRef"
  htmlParseChunk(ctxt.l, chunk.l, size.l, terminate.l) As "_htmlParseChunk"
  htmlParseDoc(cur.l, encoding.l) As "_htmlParseDoc"
  htmlParseDocument(ctxt.l) As "_htmlParseDocument"
  htmlParseElement(ctxt.l) As "_htmlParseElement"
  htmlParseEntityRef(ctxt.l, str.l) As "_htmlParseEntityRef"
  htmlParseFile(filename.l, encoding.l) As "_htmlParseFile"
  htmlReadDoc(cur.l, URL.l, encoding.l, options.l) As "_htmlReadDoc"
  htmlReadFd(fd.l, URL.l, encoding.l, options.l) As "_htmlReadFd"
  htmlReadFile(filename.l, encoding.l, options.l) As "_htmlReadFile"
  htmlReadIO(ioread.l, ioclose.l, ioctx.l, URL.l, encoding.l, options.l) As "_htmlReadIO"
  htmlReadMemory(buffer.l, size.l, URL.l, encoding.l, options.l) As "_htmlReadMemory"
  htmlSAXParseDoc(cur.l, encoding.l, sax.l, userData.l) As "_htmlSAXParseDoc"
  htmlSAXParseFile(filename.l, encoding.l, sax.l, userData.l) As "_htmlSAXParseFile"
  htmlTagLookup(tag.l) As "_htmlTagLookup"
  ;->HTMLtree: specific APIs To process HTML tree, especially serialization
  htmlDocContentDumpFormatOutput(buf.l, cur.l, encoding.l, format.l) As "_htmlDocContentDumpFormatOutput"
  htmlDocContentDumpOutput(buf.l, cur.l, encoding.l) As "_htmlDocContentDumpOutput"
  htmlDocDump(f.l, cur.l) As "_htmlDocDump"
  htmlDocDumpMemory(cur.l, mem.l, size.l) As "_htmlDocDumpMemory"
  htmlDocDumpMemoryFormat(cur.l, mem.l, size.l, format.l) As "_htmlDocDumpMemoryFormat"
  htmlGetMetaEncoding(doc.l) As "_htmlGetMetaEncoding"
  htmlIsBooleanAttr(name.l) As "_htmlIsBooleanAttr"
  htmlNewDoc(URI.l, ExternalID.l) As "_htmlNewDoc"
  htmlNewDocNoDtD(URI.l, ExternalID.l) As "_htmlNewDocNoDtD"
  htmlNodeDump(buf.l, doc.l, cur.l) As "_htmlNodeDump"
  htmlNodeDumpFile(out.l, doc.l, cur.l) As "_htmlNodeDumpFile"
  htmlNodeDumpFileFormat(out.l, doc.l, cur.l, encoding.l) As "_htmlNodeDumpFileFormat"
  htmlNodeDumpFormatOutput(buf.l, doc.l, cur.l, encoding.l, format.l) As "_htmlNodeDumpFormatOutput"
  htmlNodeDumpOutput(buf.l, doc.l, cur.l, encoding.l) As "_htmlNodeDumpOutput"
  htmlSaveFile(filename.l, cur.l) As "_htmlSaveFile"
  htmlSaveFileEnc(filename.l, cur.l, encoding.l) As "_htmlSaveFileEnc"
  htmlSaveFileFormat(filename.l, cur.l, encoding.l, format.l) As "_htmlSaveFileFormat"
  htmlSetMetaEncoding(doc.l, encoding.l) As "_htmlSetMetaEncoding"
  ;->SAX: Old SAX version 1 handler, deprecated
  comment(ctx.l, value.l) As "_comment"
  checkNamespace(ctx.l, namespace.l) As "_checkNamespace"
  getColumnNumber(ctx.l) As "_getColumnNumber"
  entityDecl(ctx.l, name.l, type.l, publicId.l, systemId.l, content.l) As "_entityDecl"
  attribute(ctx.l, fullname.l, value.l) As "_attribute"
  getNamespace(ctx.l) As "_getNamespace"
  setDocumentLocator(ctx.l, loc.l) As "_setDocumentLocator"
  initxmlDefaultSAXHandler(hdlr.l, warning.l) As "_initxmlDefaultSAXHandler"
  ignorableWhitespace(ctx.l, ch.l, len.l) As "_ignorableWhitespace"
  hasExternalSubset(ctx.l) As "_hasExternalSubset"
  unparsedEntityDecl(ctx.l, name.l, publicId.l, systemId.l, notationName.l) As "_unparsedEntityDecl"
  globalNamespace(ctx.l, href.l, prefix.l) As "_globalNamespace"
  hasInternalSubset(ctx.l) As "_hasInternalSubset"
  reference(ctx.l, name.l) As "_reference"
  notationDecl(ctx.l, name.l, publicId.l, systemId.l) As "_notationDecl"
  getSystemId(ctx.l) As "_getSystemId"
  externalSubset(ctx.l, name.l, publicId.l, systemId.l) As "_externalSubset"
  resolveEntity(ctx.l, publicId.l, systemId.l) As "_resolveEntity"
  startDocument(ctx.l) As "_startDocument"
  setNamespace(ctx.l, name.l) As "_setNamespace"
  cdataBlock(ctx.l, value.l, len.l) As "_cdataBlock"
  getPublicId(ctx.l) As "_getPublicId"
  inithtmlDefaultSAXHandler(hdlr.l) As "_inithtmlDefaultSAXHandler"
  processingInstruction(ctx.l, target.l, data_.l) As "_processingInstruction"
  endElement(ctx.l, name.l) As "_endElement"
  namespaceDecl(ctx.l, href.l, prefix.l) As "_namespaceDecl"
  initdocbDefaultSAXHandler(hdlr.l) As "_initdocbDefaultSAXHandler"
  getEntity(ctx.l, name.l) As "_getEntity"
  characters(ctx.l, ch.l, len.l) As "_characters"
  elementDecl(ctx.l, name.l, type.l, content.l) As "_elementDecl"
  startElement(ctx.l, fullname.l, atts.l) As "_startElement"
  getParameterEntity(ctx.l, name.l) As "_getParameterEntity"
  attributeDecl(ctx.l, elem.l, fullname.l, type.l, def.l, defaultValue.l, tree.l) As "_attributeDecl"
  isStandalone(ctx.l) As "_isStandalone"
  internalSubset(ctx.l, name.l, publicId.l, systemId.l) As "_internalSubset"
  endDocument(ctx.l) As "_endDocument"
  getLineNumber(ctx.l) As "_getLineNumber"
  ;->SAX2: SAX2 parser Interface used To build the DOM tree
  docbDefaultSAXHandlerInit() As "_docbDefaultSAXHandlerInit"
  htmlDefaultSAXHandlerInit() As "_htmlDefaultSAXHandlerInit"
  xmlDefaultSAXHandlerInit() As "_xmlDefaultSAXHandlerInit"
  xmlSAX2AttributeDecl(ctx.l, elem.l, fullname.l, type.l, def.l, defaultValue.l, tree.l) As "_xmlSAX2AttributeDecl"
  xmlSAX2CDataBlock(ctx.l, value.l, len.l) As "_xmlSAX2CDataBlock"
  xmlSAX2Characters(ctx.l, ch.l, len.l) As "_xmlSAX2Characters"
  xmlSAX2Comment(ctx.l, value.l) As "_xmlSAX2Comment"
  xmlSAX2ElementDecl(ctx.l, name.l, type.l, content.l) As "_xmlSAX2ElementDecl"
  xmlSAX2EndDocument(ctx.l) As "_xmlSAX2EndDocument"
  xmlSAX2EndElement(ctx.l, name.l) As "_xmlSAX2EndElement"
  xmlSAX2EndElementNs(ctx.l, localname,l, prefix.l, URI.l) As "_xmlSAX2EndElementNs"
  xmlSAX2EntityDecl(ctx.l, name.l, type.l, publicId.l, systemId.l, content.l) As "_xmlSAX2EntityDecl"
  xmlSAX2ExternalSubset(ctx.l, name.l, ExternalID.l, SystemID.l) As "_xmlSAX2ExternalSubset"
  xmlSAX2GetColumnNumber(ctx.l) As "_xmlSAX2GetColumnNumber"
  xmlSAX2GetEntity(ctx.l, name.l) As "_xmlSAX2GetEntity"
  xmlSAX2GetLineNumber(ctx.l) As "_xmlSAX2GetLineNumber"
  xmlSAX2GetParameterEntity(ctx.l, name.l) As "_xmlSAX2GetParameterEntity"
  xmlSAX2GetPublicId(ctx.l) As "_xmlSAX2GetPublicId"
  xmlSAX2GetSystemId(ctx.l) As "_xmlSAX2GetSystemId"
  xmlSAX2HasExternalSubset(ctx.l) As "_xmlSAX2HasExternalSubset"
  xmlSAX2HasInternalSubset(ctx.l) As "_xmlSAX2HasInternalSubset"
  xmlSAX2IgnorableWhitespace(ctx.l, ch.l, len.l) As "_xmlSAX2IgnorableWhitespace"
  xmlSAX2InitDefaultSAXHandler(hdlr.l, warning.l) As "_xmlSAX2InitDefaultSAXHandler"
  xmlSAX2InitDocbDefaultSAXHandler(hdlr.l) As "_xmlSAX2InitDocbDefaultSAXHandler"
  xmlSAX2InitHtmlDefaultSAXHandler(hdlr.l) As "_xmlSAX2InitHtmlDefaultSAXHandler"
  xmlSAX2InternalSubset(ctx.l, name.l, ExternalID.l, SystemID.l) As "_xmlSAX2InternalSubset"
  xmlSAX2IsStandalone(ctx.l) As "_xmlSAX2IsStandalone"
  xmlSAX2NotationDecl(ctx.l, name.l, publiclID.l, SystemID.l) As "_xmlSAX2NotationDecl"
  xmlSAX2ProcessingInstruction(ctx.l, target.l, data_.l) As "_xmlSAX2ProcessingInstruction"
  xmlSAX2Reference(ctx.l, name.l) As "_xmlSAX2Reference"
  xmlSAX2ResolveEntity(ctx.l, publiclID.l, SystemID.l) As "_xmlSAX2ResolveEntity"
  xmlSAX2SetDocumentLocator(ctx.l, loc.l) As "_xmlSAX2SetDocumentLocator"
  xmlSAX2StartDocument(ctx.l) As "_xmlSAX2StartDocument"
  xmlSAX2StartElement(ctx.l, fullname.l, atts.l) As "_xmlSAX2StartElement"
  xmlSAX2StartElementNs(ctx.l, localname.l, prefix.l, URI.l, nb_namespaces.l, namespaces.l, nb_attributes.l, nb_defaulted.l, attributes.l) As "_xmlSAX2StartElementNs"
  xmlSAX2UnparsedEntityDecl(ctx.l, name.l, publicId.l, systemId.l, notationName.l) As "_xmlSAX2UnparsedEntityDecl"
  xmlSAXDefaultVersion(version.l) As "_xmlSAXDefaultVersion"
  xmlSAXVersion(hdlr.l, version.l) As "_xmlSAXVersion"
  ;->c14n: Provide Canonical XML And Exclusive XML Canonicalization
  xmlC14NDocDumpMemory(doc.l, nodes.l, exclusive.l, inclusive_ns_prefixes.l, with_comments.l, doc_txt_ptr.l) As "_xmlC14NDocDumpMemory"
  xmlC14NDocSave(doc.l, nodes.l, exclusive.l, inclusive_ns_prefixes.l, with_comments.l, filename.l, compression.l) As "_xmlC14NDocSave"
  xmlC14NDocSaveTo(doc.l, nodes.l, exclusive.l, inclusive_ns_prefixes.l, with_comments.l, buf.l) As "_xmlC14NDocSaveTo"
  xmlC14NExecute(doc.l, is_visible_callback.l, user_data.l, exclusive.l, inclusive_ns_prefixes.l, with_comments.l, buf.l) As "_xmlC14NExecute"
  ;->catalog: interfaces To the Catalog handling system
  xmlACatalogAdd(catal.l, type.l, orig.l, replace.l) As "_xmlACatalogAdd"
  xmlACatalogDump(catal.l, out.l) As "_xmlACatalogDump"
  xmlACatalogRemove(catal.l, value.l) As "_xmlACatalogRemove"
  xmlACatalogResolve(catal.l, pubID.l, sysID.l) As "_xmlACatalogResolve"
  xmlACatalogResolvePublic(catal.l, pubID.l) As "_xmlACatalogResolvePublic"
  xmlACatalogResolveSystem(catal.l, sysID.l) As "_xmlACatalogResolveSystem"
  xmlACatalogResolveURI(catal.l, URI.l) As "_xmlACatalogResolveURI"
  xmlCatalogAdd(type.l, orig.l, replace.l) As "_xmlCatalogAdd"
  xmlCatalogAddLocal(catalogs.l, URL.l) As "_xmlCatalogAddLocal"
  xmlCatalogCleanup() As "_xmlCatalogCleanup"
  xmlCatalogConvert() As "_xmlCatalogConvert"
  xmlCatalogDump(out.l) As "_xmlCatalogDump"
  xmlCatalogFreeLocal(catalogs.l) As "_xmlCatalogFreeLocal"
  xmlCatalogGetDefaults() As "_xmlCatalogGetDefaults"
  xmlCatalogGetPublic(pubID.l) As "_xmlCatalogGetPublic"
  xmlCatalogGetSystem(sysID.l) As "_xmlCatalogGetSystem"
  xmlCatalogIsEmpty(catal.l) As "_xmlCatalogIsEmpty"
  xmlCatalogLocalResolve(catalogs.l, pubID.l, sysID.l) As "_xmlCatalogLocalResolve"
  xmlCatalogLocalResolveURI(catalogs.l, URI.l) As "_xmlCatalogLocalResolveURI"
  xmlCatalogRemove(value.l) As "_xmlCatalogRemove"
  xmlCatalogResolve(pubID.l, sysID.l) As "_xmlCatalogResolve"
  xmlCatalogResolvePublic(pubID.l) As "_xmlCatalogResolvePublic"
  xmlCatalogResolveSystem(sysID.l) As "_xmlCatalogResolveSystem"
  xmlCatalogResolveURI(URI.l) As "_xmlCatalogResolveURI"
  xmlCatalogSetDebug(level.l) As "_xmlCatalogSetDebug"
  xmlCatalogSetDefaultPrefer(prefer.l) As "_xmlCatalogSetDefaultPrefer"
  xmlCatalogSetDefaults(allow.l) As "_xmlCatalogSetDefaults"
  xmlConvertSGMLCatalog(catal.l) As "_xmlConvertSGMLCatalog"
  xmlFreeCatalog(catal.l) As "_xmlFreeCatalog"
  xmlInitializeCatalog() As "_xmlInitializeCatalog"
  xmlLoadACatalog(filename.l) As "_xmlLoadACatalog"
  xmlLoadCatalog(filename.l) As "_xmlLoadCatalog"
  xmlLoadCatalogs(pathss.l) As "_xmlLoadCatalogs"
  xmlLoadSGMLSuperCatalog(filename.l) As "_xmlLoadSGMLSuperCatalog"
  xmlNewCatalog(sgml.l) As "_xmlNewCatalog"
  xmlParseCatalogFile(filename.l) As "_xmlParseCatalogFile"
  ;->chvalid: Unicode character range checking
  xmlCharInRange(val.l, rptr.l) As "_xmlCharInRange"
  xmlIsBaseChar(ch.l) As "_xmlIsBaseChar"
  xmlIsBlank(ch.l) As "_xmlIsBlank"
  xmlIsChar(ch.l) As "_xmlIsChar"
  xmlIsCombining(ch.l) As "_xmlIsCombining"
  xmlIsDigit(ch.l) As "_xmlIsDigit"
  xmlIsExtender(ch.l) As "_xmlIsExtender"
  xmlIsIdeographic(ch.l) As "_xmlIsIdeographic"
  xmlIsPubidChar(ch.l) As "_xmlIsPubidChar"
  ;->debugXML: Tree debugging APIs
  xmlBoolToText(bollval.l) As "_xmlBoolToText"
  xmlDebugCheckDocument(output.l, doc.l) As "_xmlDebugCheckDocument"
  xmlDebugDumpAttr(output.l, attr.l, depth.l) As "_xmlDebugDumpAttr"
  xmlDebugDumpAttrList(output.l, attr.l, depth.l) As "_xmlDebugDumpAttrList"
  xmlDebugDumpDTD(output.l, dtd.l) As "_xmlDebugDumpDTD"
  xmlDebugDumpDocument(output.l, doc.l) As "_xmlDebugDumpDocument"
  xmlDebugDumpDocumentHead(output.l, doc.l) As "_xmlDebugDumpDocumentHead"
  xmlDebugDumpEntities(output.l, doc.l) As "_xmlDebugDumpEntities"
  xmlDebugDumpNode(output.l, node.l, depth.l) As "_xmlDebugDumpNode"
  xmlDebugDumpNodeList(output.l, node.l, depth.l) As "_xmlDebugDumpNodeList"
  xmlDebugDumpOneNode(output.l, node.l, depth.l) As "_xmlDebugDumpOneNode"
  xmlDebugDumpString(output.l, str.l) As "_xmlDebugDumpString"
  xmlLsCountNode(node.l) As "_xmlLsCountNode"
  xmlLsOneNode(output.l, node.l) As "_xmlLsOneNode"
  xmlShell(doc.l, filename.l, input.l, output.l) As "_xmlShell"
  xmlShellBase(ctxt.l, arg.l, node.l, node2.l) As "_xmlShellBase"
  xmlShellCat(ctxt.l, arg.l, node.l, node2.l) As "_xmlShellCat"
  xmlShellDir(ctxt.l, arg.l, node.l, node2.l) As "_xmlShellDir"
  xmlShellDu(ctxt.l, arg.l, tree.l, node2.l) As "_xmlShellDu"
  xmlShellList(ctxt.l, arg.l, node.l, node2.l) As "_xmlShellList"
  xmlShellLoad(ctxt.l, filename.l, node.l, node2.l) As "_xmlShellLoad"
  xmlShellPrintNode(node.l) As "_xmlShellPrintNode"
  xmlShellPrintXPathError(errorType.l, arg.l) As "_xmlShellPrintXPathError"
  xmlShellPrintXPathResult(list.l) As "_xmlShellPrintXPathResult"
  xmlShellPwd(ctxt.l, buffer.l, node.l, node2.l) As "_xmlShellPwd"
  xmlShellSave(ctxt.l, filename.l, node.l, node2.l) As "_xmlShellSave"
  xmlShellValidate(ctxt.l, dtd.l, node.l, node2.l) As "_xmlShellValidate"
  xmlShellWrite(ctxt.l, filename.l, node.l, node2.l) As "_xmlShellWrite"
  ;->dict: string dictionnary
  xmlDictCleanup() As "_xmlDictCleanup"
  xmlDictCreate() As "_xmlDictCreate"
  xmlDictCreateSub(sub.l) As "_xmlDictCreateSub"
  xmlDictExists(dict.l, name.l, len.l) As "_xmlDictExists"
  xmlDictFree(dict.l) As "_xmlDictFree"
  xmlDictLookup(dict.l, name.l, len.l) As "_xmlDictLookup"
  xmlDictOwns(dict.l, str.l) As "_xmlDictOwns"
  xmlDictQLookup(dict.l, prefix.l, name.l) As "_xmlDictQLookup"
  xmlDictReference(dict.l) As "_xmlDictReference"
  xmlDictSize(dict.l) As "_xmlDictSize"
  ;->encoding: Interface For the encoding conversion functions
  UTF8Toisolat1(out.l, outlen.l, in.l, inlen.l) As "_UTF8Toisolat1"
  isolat1ToUTF8(out.l, outlen.l, in.l, inlen.l) As "_isolat1ToUTF8"
  xmlAddEncodingAlias(name.l, alias.l) As "_xmlAddEncodingAlias"
  xmlCharEncCloseFunc(handler.l) As "_xmlCharEncCloseFunc"
  xmlCharEncFirstLine(handler.l, out.l, in.l) As "_xmlCharEncFirstLine"
  xmlCharEncInFunc(handler.l, out.l, in.l) As "_xmlCharEncInFunc"
  xmlCharEncOutFunc(handler.l, out.l, in.l) As "_xmlCharEncOutFunc"
  xmlCleanupCharEncodingHandlers() As "_xmlCleanupCharEncodingHandlers"
  xmlCleanupEncodingAliases() As "_xmlCleanupEncodingAliases"
  xmlDelEncodingAlias(alias.l) As "_xmlDelEncodingAlias"
  xmlDetectCharEncoding(in.l, len.l) As "_xmlDetectCharEncoding"
  xmlFindCharEncodingHandler(name.l) As "_xmlFindCharEncodingHandler"
  xmlGetCharEncodingHandler(enc.l) As "_xmlGetCharEncodingHandler"
  xmlGetCharEncodingName(enc.l) As "_xmlGetCharEncodingName"
  xmlGetEncodingAlias(alias.l) As "_xmlGetEncodingAlias"
  xmlInitCharEncodingHandlers() As "_xmlInitCharEncodingHandlers"
  xmlNewCharEncodingHandler(name.l, input.l, output.l) As "_xmlNewCharEncodingHandler"
  xmlParseCharEncoding(name.l) As "_xmlParseCharEncoding"
  xmlRegisterCharEncodingHandler(handler.l) As "_xmlRegisterCharEncodingHandler"
  ;->entities: Interface For the XML entities handling
  xmlAddDocEntity(doc.l, name.l, type.l, ExternalID.l, SystemID.l, content.l) As "_xmlAddDocEntity"
  xmlAddDtdEntity(doc.l, name.l, type.l, ExternalID.l, SystemID.l, content.l) As "_xmlAddDtdEntity"
  xmlCleanupPredefinedEntities() As "_xmlCleanupPredefinedEntities"
  xmlCopyEntitiesTable(table.l) As "_xmlCopyEntitiesTable"
  xmlCreateEntitiesTable() As "_xmlCreateEntitiesTable"
  xmlDumpEntitiesTable(buf.l, table.l) As "_xmlDumpEntitiesTable"
  xmlDumpEntityDecl(buf.l, ent.l) As "_xmlDumpEntityDecl"
  xmlEncodeEntities(doc.l, input.l) As "_xmlEncodeEntities"
  xmlEncodeEntitiesReentrant(doc.l, input.l) As "_xmlEncodeEntitiesReentrant"
  xmlEncodeSpecialChars(doc.l, input.l) As "_xmlEncodeSpecialChars"
  xmlFreeEntitiesTable(table.l) As "_xmlFreeEntitiesTable"
  xmlGetDocEntity(doc.l, name.l) As "_xmlGetDocEntity"
  xmlGetDtdEntity(doc.l, name.l) As "_xmlGetDtdEntity"
  xmlGetParameterEntity(doc.l, name.l) As "_xmlGetParameterEntity"
  xmlGetPredefinedEntity(name.l) As "_xmlGetPredefinedEntity"
  xmlInitializePredefinedEntities() As "_xmlInitializePredefinedEntities"
  ;->globals: Interface For all Global variables of the library
  xmlCleanupGlobals() As "_xmlCleanupGlobals"
  xmlDeregisterNodeDefault(func.l) As "_xmlDeregisterNodeDefault"
  xmlInitGlobals() As "_xmlInitGlobals"
  xmlInitializeGlobalState(gs.l) As "_xmlInitializeGlobalState"
  xmlOutputBufferCreateFilenameDefault(func.l) As "_xmlOutputBufferCreateFilenameDefault"
  xmlParserInputBufferCreateFilenameDefault(func.l) As "_xmlParserInputBufferCreateFilenameDefault"
  xmlRegisterNodeDefault(unc.l) As "_xmlRegisterNodeDefault"
  xmlThrDefBufferAllocScheme(v.l) As "_xmlThrDefBufferAllocScheme"
  xmlThrDefDefaultBufferSize(v.l) As "_xmlThrDefDefaultBufferSize"
  xmlThrDefDeregisterNodeDefault(func.l) As "_xmlThrDefDeregisterNodeDefault"
  xmlThrDefDoValidityCheckingDefaultValue(v.l) As "_xmlThrDefDoValidityCheckingDefaultValue"
  xmlThrDefGetWarningsDefaultValue(v.l) As "_xmlThrDefGetWarningsDefaultValue"
  xmlThrDefIndentTreeOutput(v.l) As "_xmlThrDefIndentTreeOutput"
  xmlThrDefKeepBlanksDefaultValue(v.l) As "_xmlThrDefKeepBlanksDefaultValue"
  xmlThrDefLineNumbersDefaultValue(v.l) As "_xmlThrDefLineNumbersDefaultValue"
  xmlThrDefLoadExtDtdDefaultValue(v.l) As "_xmlThrDefLoadExtDtdDefaultValue"
  xmlThrDefOutputBufferCreateFilenameDefault(func.l) As "_xmlThrDefOutputBufferCreateFilenameDefault"
  xmlThrDefParserDebugEntities(v.l) As "_xmlThrDefParserDebugEntities"
  xmlThrDefParserInputBufferCreateFilenameDefault(func.l) As "_xmlThrDefParserInputBufferCreateFilenameDefault"
  xmlThrDefPedanticParserDefaultValue(v.l) As "_xmlThrDefPedanticParserDefaultValue"
  xmlThrDefRegisterNodeDefault(func.l) As "_xmlThrDefRegisterNodeDefault"
  xmlThrDefSaveNoEmptyTags(v.l) As "_xmlThrDefSaveNoEmptyTags"
  xmlThrDefSetGenericErrorFunc(ctx.l, handler.l) As "_xmlThrDefSetGenericErrorFunc"
  xmlThrDefSetStructuredErrorFunc(ctx.l, handler.l) As "_xmlThrDefSetStructuredErrorFunc"
  xmlThrDefSubstituteEntitiesDefaultValue(v.l) As "_xmlThrDefSubstituteEntitiesDefaultValue"
  xmlThrDefTreeIndentString(v.l) As "_xmlThrDefTreeIndentString"
  ;->hash: Chained hash tables
  xmlHashAddEntry(table.l, name.l, userdata.l) As "_xmlHashAddEntry"
  xmlHashAddEntry2(table.l, name.l, name2.l, userdata.l) As "_xmlHashAddEntry2"
  xmlHashAddEntry3(table.l, name.l, name2.l, name3.l, userdata.l) As "_xmlHashAddEntry3"
  xmlHashCopy(table.l, f.l) As "_xmlHashCopy"
  xmlHashCreate(size.l) As "_xmlHashCreate"
  xmlHashCreateDict(size.l, dict.l) As "_xmlHashCreateDict"
  xmlHashFree(table.l, f.l) As "_xmlHashFree"
  xmlHashLookup(table.l, name.l) As "_xmlHashLookup"
  xmlHashLookup2(table.l, name.l, name2.l) As "_xmlHashLookup2"
  xmlHashLookup3(table.l, name.l, name2.l, name3.l) As "_xmlHashLookup3"
  xmlHashQLookup(table.l, prefix.l, name.l) As "_xmlHashQLookup"
  xmlHashQLookup2(table.l, prefix.l, name.l, prefix2.l, name2.l) As "_xmlHashQLookup2"
  xmlHashQLookup3(table.l, prefix.l, name.l, prefix2.l, name2.l, prefix3.l, name3.l) As "_xmlHashQLookup3"
  xmlHashRemoveEntry(table.l, name.l, f.l) As "_xmlHashRemoveEntry"
  xmlHashRemoveEntry2(table.l, name.l, name2.l, f.l) As "_xmlHashRemoveEntry2"
  xmlHashRemoveEntry3(table.l, name.l, name2.l, name3.l, f.l) As "_xmlHashRemoveEntry3"
  xmlHashScan(table.l, f.l) As "_xmlHashScan"
  xmlHashScan3(table.l, name.l, name2.l, name3.l, f.l) As "_xmlHashScan3"
  xmlHashScanFull(table.l, f.l, data_.l) As "_xmlHashScanFull"
  xmlHashScanFull3(table.l, name.l, name2.l, name3.l, f.l, data_.l) As "_xmlHashScanFull3"
  xmlHashSize(table.l) As "_xmlHashSize"
  xmlHashUpdateEntry(table.l, name.l, userdata.l, f.l) As "_xmlHashUpdateEntry"
  xmlHashUpdateEntry2(table.l, name.l, name2.l, userdata.l, f.l) As "_xmlHashUpdateEntry2"
  xmlHashUpdateEntry3(table.l, name.l, name2.l, name3.l, userdata.l, f.l) As "_xmlHashUpdateEntry3"
  ;->list: lists interfaces
  xmlLinkGetData(lk.l) As "_xmlLinkGetData"
  xmlListAppend(l.l, data_.l) As "_xmlListAppend"
  xmlListClear(l.l) As "_xmlListClear"
  xmlListCopy(cur.l, old.l) As "_xmlListCopy"
  xmlListCreate(deallocator.l, compare.l) As "_xmlListCreate"
  xmlListDelete(l.l) As "_xmlListDelete"
  xmlListDup(old.l) As "_xmlListDup"
  xmlListEmpty(l.l) As "_xmlListEmpty"
  xmlListEnd(l.l) As "_xmlListEnd"
  xmlListFront(l.l) As "_xmlListFront"
  xmlListInsert(l.l, data_.l) As "_xmlListInsert"
  xmlListMerge(l1.l,l2.l) As "_xmlListMerge"
  xmlListPopBack(l.l) As "_xmlListPopBack"
  xmlListPopFront(l.l) As "_xmlListPopFront"
  xmlListPushBack(l.l, data_.l) As "_xmlListPushBack"
  xmlListPushFront(l.l, data_.l) As "_xmlListPushFront"
  xmlListRemoveAll(l.l, data_.l) As "_xmlListRemoveAll"
  xmlListRemoveFirst(l.l, data_.l) As "_xmlListRemoveFirst"
  xmlListRemoveLast(l.l, data_.l) As "_xmlListRemoveLast"
  xmlListReverse(l.l) As "_xmlListReverse"
  xmlListReverseSearch(l.l, data_.l) As "_xmlListReverseSearch"
  xmlListReverseWalk(l.l, walker.l, user.l) As "_xmlListReverseWalk"
  xmlListSearch(l.l, data_.l) As "_xmlListSearch"
  xmlListSize(l.l) As "_xmlListSize"
  xmlListSort(l.l) As "_xmlListSort"
  xmlListWalk(l.l, walker.l, user.l) As "_xmlListWalk"
  ;->nanoftp: minimal FTP implementation
  xmlNanoFTPCheckResponse(ctx.l) As "_xmlNanoFTPCheckResponse"
  xmlNanoFTPCleanup() As "_xmlNanoFTPCleanup"
  xmlNanoFTPClose(ctx.l) As "_xmlNanoFTPClose"
  xmlNanoFTPCloseConnection(ctx.l) As "_xmlNanoFTPCloseConnection"
  xmlNanoFTPConnect(ctx.l) As "_xmlNanoFTPConnect"
  xmlNanoFTPConnectTo(server.l, port.l) As "_xmlNanoFTPConnectTo"
  xmlNanoFTPCwd(ctx.l, directory.l) As "_xmlNanoFTPCwd"
  xmlNanoFTPDele(ctx.l, file.l) As "_xmlNanoFTPDele"
  xmlNanoFTPFreeCtxt(ctx.l) As "_xmlNanoFTPFreeCtxt"
  xmlNanoFTPGet(ctx.l, callback.l, userData.l, filename.l) As "_xmlNanoFTPGet"
  xmlNanoFTPGetConnection(ctx.l) As "_xmlNanoFTPGetConnection"
  xmlNanoFTPGetResponse(ctx.l) As "_xmlNanoFTPGetResponse"
  xmlNanoFTPGetSocket(ctx.l, filename.l) As "_xmlNanoFTPGetSocket"
  xmlNanoFTPInit() As "_xmlNanoFTPInit"
  xmlNanoFTPList(ctx.l, callback.l, userData.l, filename.l) As "_xmlNanoFTPList"
  xmlNanoFTPNewCtxt(URL.l) As "_xmlNanoFTPNewCtxt"
  xmlNanoFTPOpen(URL.l) As "_xmlNanoFTPOpen"
  xmlNanoFTPProxy(host.l, port.l, user.l, passwd.l, type.l) As "_xmlNanoFTPProxy"
  xmlNanoFTPQuit(ctx.l) As "_xmlNanoFTPQuit"
  xmlNanoFTPRead(ctx.l, dest.l, len.l) As "_xmlNanoFTPRead"
  xmlNanoFTPScanProxy(URL.l) As "_xmlNanoFTPScanProxy"
  xmlNanoFTPUpdateURL(ctx.l, URL.l) As "_xmlNanoFTPUpdateURL"
  ;->nanohttp: minimal HTTP implementation
  xmlNanoHTTPAuthHeader(ctx.l) As "_xmlNanoHTTPAuthHeader"
  xmlNanoHTTPCleanup() As "_xmlNanoHTTPCleanup"
  xmlNanoHTTPClose(ctx.l) As "_xmlNanoHTTPClose"
  xmlNanoHTTPContentLength(ctx.l) As "_xmlNanoHTTPContentLength"
  xmlNanoHTTPEncoding(ctx.l) As "_xmlNanoHTTPEncoding"
  xmlNanoHTTPFetch(URL.l, filename.l, contentType.l) As "_xmlNanoHTTPFetch"
  xmlNanoHTTPInit() As "_xmlNanoHTTPInit"
  xmlNanoHTTPMethod(URL.l, method.l, input.l, contentType.l, headers.l, ilen.l) As "_xmlNanoHTTPMethod"
  xmlNanoHTTPMethodRedir(URL.l, method.l, input.l, contentType.l, redir.l, headers.l, ilen.l) As "_xmlNanoHTTPMethodRedir"
  xmlNanoHTTPMimeType(ctx.l) As "_xmlNanoHTTPMimeType"
  xmlNanoHTTPOpen(URL.l, contentType.l) As "_xmlNanoHTTPOpen"
  xmlNanoHTTPOpenRedir(URL.l, contentType.l, redir.l) As "_xmlNanoHTTPOpenRedir"
  xmlNanoHTTPRead(ctx.l, dest.l, len.l) As "_xmlNanoHTTPRead"
  xmlNanoHTTPRedir(ctx.l) As "_xmlNanoHTTPRedir"
  xmlNanoHTTPReturnCode(ctx.l) As "_xmlNanoHTTPReturnCode"
  xmlNanoHTTPSave(ctx.l, filename.l) As "_xmlNanoHTTPSave"
  xmlNanoHTTPScanProxy(URL.l) As "_xmlNanoHTTPScanProxy"
  ;->parser: the core parser module
  xmlByteConsumed(ctxt.l) As "_xmlByteConsumed"
  xmlCleanupParser() As "_xmlCleanupParser"
  xmlClearNodeInfoSeq(seq.l) As "_xmlClearNodeInfoSeq"
  xmlClearParserCtxt(ctxt.l) As "_xmlClearParserCtxt"
  xmlCreateDocParserCtxt(cur.l) As "_xmlCreateDocParserCtxt"
  xmlCreateIOParserCtxt(sax.l, user_data.l, ioread.l, ioclose.l, ioctx.l, enc.l) As "_xmlCreateIOParserCtxt"
  xmlCreatePushParserCtxt(sax.l, user_data.l, chunk.l, size.l, filename.l) As "_xmlCreatePushParserCtxt"
  xmlCtxtReadDoc(ctxt.l, cur.l, URL.l, encoding.l, options.l) As "_xmlCtxtReadDoc"
  xmlCtxtReadFd(ctxt.l, fd.l, URL.l, encoding.l, options.l) As "_xmlCtxtReadFd"
  xmlCtxtReadFile(ctxt.l, filename.l, encoding.l, options.l) As "_xmlCtxtReadFile"
  xmlCtxtReadIO(ctxt.l, ioread.l, ioclose.l, ioctx.l, URL.l, encoding.l, options.l) As "_xmlCtxtReadIO"
  xmlCtxtReadMemory(ctxt.l, buffer.l, size.l, URL.l, encoding.l, options.l) As "_xmlCtxtReadMemory"
  xmlCtxtReset(ctxt.l) As "_xmlCtxtReset"
  xmlCtxtResetPush(ctxt.l, chunk.l, size.l, filename.l, encoding.l) As "_xmlCtxtResetPush"
  xmlCtxtUseOptions(ctxt.l, options.l) As "_xmlCtxtUseOptions"
  xmlFreeParserCtxt(ctxt.l) As "_xmlFreeParserCtxt"
  xmlGetExternalEntityLoader() As "_xmlGetExternalEntityLoader"
  xmlGetFeature(ctxt.l, name.l, result.l) As "_xmlGetFeature"
  xmlGetFeaturesList(len.l, result.l) As "_xmlGetFeaturesList"
  xmlHasFeature(feature.l) As "_xmlHasFeature"
  xmlIOParseDTD(sax.l, input.l, enc.l) As "_xmlIOParseDTD"
  xmlInitNodeInfoSeq(seq.l) As "_xmlInitNodeInfoSeq"
  xmlInitParser() As "_xmlInitParser"
  xmlInitParserCtxt(ctxt.l) As "_xmlInitParserCtxt"
  xmlKeepBlanksDefault(val.l) As "_xmlKeepBlanksDefault"
  xmlLineNumbersDefault(val.l) As "_xmlLineNumbersDefault"
  xmlLoadExternalEntity(URL.l, ID.l, ctxt.l) As "_xmlLoadExternalEntity"
  xmlNewIOInputStream(ctxt.l, input.l, enc.l) As "_xmlNewIOInputStream"
  xmlNewParserCtxt() As "_xmlNewParserCtxt"
  xmlParseBalancedChunkMemory(doc.l, sax.l, user_data.l, depth.l, string.l, lst.l) As "_xmlParseBalancedChunkMemory"
  xmlParseBalancedChunkMemoryRecover(doc.l, sax.l, user_data.l, depth.l, string.l, lst.l, recover.l) As "_xmlParseBalancedChunkMemoryRecover"
  xmlParseChunk(ctxt.l, chunk.l, size.l, terminate.l) As "_xmlParseChunk"
  xmlParseCtxtExternalEntity(ctxt.l, URL.l, ID.l, lst.l) As "_xmlParseCtxtExternalEntity"
  xmlParseDTD(ExternalID.l, SystemID.l) As "_xmlParseDTD"
  xmlParseDoc(cur.l) As "_xmlParseDoc"
  xmlParseDocument(ctxt.l) As "_xmlParseDocument"
  xmlParseEntity(filename.l) As "_xmlParseEntity"
  xmlParseExtParsedEnt(ctxt.l) As "_xmlParseExtParsedEnt"
  xmlParseExternalEntity(doc.l, sax.l, user_data.l, depth.l, URL.l, ID.l, lst.l) As "_xmlParseExternalEntity"
  xmlParseFile(filename.l) As "_xmlParseFile"
  xmlParseInNodeContext(node.l, data_.l, datalen.l, options.l, lst.l) As "_xmlParseInNodeContext"
  xmlParseMemory(buffer.l, size.l) As "_xmlParseMemory"
  xmlParserAddNodeInfo(ctxt.l, info.l) As "_xmlParserAddNodeInfo"
  xmlParserFindNodeInfo(ctxt.l, node.l) As "_xmlParserFindNodeInfo"
  xmlParserFindNodeInfoIndex(seq.l, node.l) As "_xmlParserFindNodeInfoIndex"
  xmlParserInputGrow(in.l, len.l) As "_xmlParserInputGrow"
  xmlParserInputRead(in.l, len.l) As "_xmlParserInputRead"
  xmlPedanticParserDefault(val.l) As "_xmlPedanticParserDefault"
  xmlReadDoc(cur.l, URL.l, encoding.l, options.l) As "_xmlReadDoc"
  xmlReadFd(fd.l, URL.l, encoding.l, options.l) As "_xmlReadFd"
  xmlReadFile(filename.l, encoding.l, options.l) As "_xmlReadFile"
  xmlReadIO(ioread.l, ioclose.l, ioctx.l, URL.l, encoding.l, options.l) As "_xmlReadIO"
  xmlReadMemory(buffer.l, size.l, URL.l, encoding.l, options.l) As "_xmlReadMemory"
  xmlRecoverDoc(cur.l) As "_xmlRecoverDoc"
  xmlRecoverFile(filename.l) As "_xmlRecoverFile"
  xmlRecoverMemory(buffer.l, size.l) As "_xmlRecoverMemory"
  xmlSAXParseDTD(sax.l, ExternalID.l, SystemID.l) As "_xmlSAXParseDTD"
  xmlSAXParseDoc(sax.l, cur.l, recovery.l) As "_xmlSAXParseDoc"
  xmlSAXParseEntity(sax.l, filename.l) As "_xmlSAXParseEntity"
  xmlSAXParseFile(sax.l, filename.l, recovery.l) As "_xmlSAXParseFile"
  xmlSAXParseFileWithData(sax.l, filename.l, recovery.l, data_.l) As "_xmlSAXParseFileWithData"
  xmlSAXParseMemory(sax.l, buffer.l, size.l, recovery.l) As "_xmlSAXParseMemory"
  xmlSAXParseMemoryWithData(ax.l, buffer.l, size.l, recovery.l, data_.l) As "_xmlSAXParseMemoryWithData"
  xmlSAXUserParseFile(sax.l, user_data.l, filename.l) As "_xmlSAXUserParseFile"
  xmlSAXUserParseMemory(sax.l, user_data.l, buffer.l, size.l) As "_xmlSAXUserParseMemory"
  xmlSetExternalEntityLoader(f.l) As "_xmlSetExternalEntityLoader"
  xmlSetFeature(ctxt.l, name.l, value.l) As "_xmlSetFeature"
  xmlSetupParserForBuffer(ctxt.l, buffer.l, filename.l) As "_xmlSetupParserForBuffer"
  xmlStopParser(ctxt.l) As "_xmlStopParser"
  xmlSubstituteEntitiesDefault(val.l) As "_xmlSubstituteEntitiesDefault"
  ;->parserInternals: internals routines exported by the parser.
  htmlCreateFileParserCtxt(filename.l, encoding.l) As "_htmlCreateFileParserCtxt"
  htmlInitAutoClose() As "_htmlInitAutoClose"
  inputPop(ctxt.l) As "_inputPop"
  inputPush(ctxt.l, value.l) As "_inputPush"
  namePop(ctxt.l) As "_namePop"
  namePush(ctxt.l, value.l) As "_namePush"
  nodePop(ctxt.l) As "_nodePop"
  nodePush(ctxt.l, value.l) As "_nodePush"
  xmlCheckLanguageID(lang.l) As "_xmlCheckLanguageID"
  xmlCopyChar(len.l, out.l, val.l) As "_xmlCopyChar"
  xmlCopyCharMultiByte(out.l, val.l) As "_xmlCopyCharMultiByte"
  xmlCreateEntityParserCtxt(URL.l, id.l, base.l) As "_xmlCreateEntityParserCtxt"
  xmlCreateFileParserCtxt(filename.l) As "_xmlCreateFileParserCtxt"
  xmlCreateMemoryParserCtxt(buffer.l, size.l) As "_xmlCreateMemoryParserCtxt"
  xmlCreateURLParserCtxt(filename.l, options.l) As "_xmlCreateURLParserCtxt"
  xmlCurrentChar(ctxt.l, len.l) As "_xmlCurrentChar"
  xmlDecodeEntities(ctxt.l, len.l, what.l, end_.l, end2.l, end3.l) As "_xmlDecodeEntities"
  xmlErrMemory(ctxt.l, extra.l) As "_xmlErrMemory"
  xmlFreeInputStream(input.l) As "_xmlFreeInputStream"
  xmlHandleEntity(ctxt.l, entity.l) As "_xmlHandleEntity"
  xmlIsLetter(c.l) As "_xmlIsLetter"
  xmlNamespaceParseNCName(ctxt.l) As "_xmlNamespaceParseNCName"
  xmlNamespaceParseNSDef(ctxt.l) As "_xmlNamespaceParseNSDef"
  xmlNamespaceParseQName(ctxt.l, prefix.l) As "_xmlNamespaceParseQName"
  xmlNewEntityInputStream(ctxt.l, entity.l) As "_xmlNewEntityInputStream"
  xmlNewInputFromFile(ctxt.l, filename.l) As "_xmlNewInputFromFile"
  xmlNewInputStream(ctxt.l) As "_xmlNewInputStream"
  xmlNewStringInputStream(ctxt.l, buffer.l) As "_xmlNewStringInputStream"
  xmlNextChar(ctxt.l) As "_xmlNextChar"
  xmlParseAttValue(ctxt.l) As "_xmlParseAttValue"
  xmlParseAttribute(ctxt.l, value.l) As "_xmlParseAttribute"
  xmlParseAttributeListDecl(ctxt.l) As "_xmlParseAttributeListDecl"
  xmlParseAttributeType(ctxt.l, tree.l) As "_xmlParseAttributeType"
  xmlParseCDSect(ctxt.l) As "_xmlParseCDSect"
  xmlParseCharData(ctxt.l, cdata.l) As "_xmlParseCharData"
  xmlParseCharRef(ctxt.l) As "_xmlParseCharRef"
  xmlParseComment(ctxt.l) As "_xmlParseComment"
  xmlParseContent(ctxt.l) As "_xmlParseContent"
  xmlParseDefaultDecl(ctxt.l, value.l) As "_xmlParseDefaultDecl"
  xmlParseDocTypeDecl(ctxt.l) As "_xmlParseDocTypeDecl"
  xmlParseElement(ctxt.l) As "_xmlParseElement"
  xmlParseElementChildrenContentDecl(ctxt.l, inputchk.l) As "_xmlParseElementChildrenContentDecl"
  xmlParseElementContentDecl(ctxt.l, name.l, result.l) As "_xmlParseElementContentDecl"
  xmlParseElementDecl(ctxt.l) As "_xmlParseElementDecl"
  xmlParseElementMixedContentDecl(ctxt.l, inputchk.l) As "_xmlParseElementMixedContentDecl"
  xmlParseEncName(ctxt.l) As "_xmlParseEncName"
  xmlParseEncodingDecl(ctxt.l) As "_xmlParseEncodingDecl"
  xmlParseEndTag(ctxt.l) As "_xmlParseEndTag"
  xmlParseEntityDecl(ctxt.l) As "_xmlParseEntityDecl"
  xmlParseEntityRef(ctxt.l) As "_xmlParseEntityRef"
  xmlParseEntityValue(ctxt.l, orig.l) As "_xmlParseEntityValue"
  xmlParseEnumeratedType(ctxt.l, tree.l) As "_xmlParseEnumeratedType"
  xmlParseEnumerationType(ctxt.l) As "_xmlParseEnumerationType"
  xmlParseExternalID(ctxt.l, publicID.l, strict.l) As "_xmlParseExternalID"
  xmlParseExternalSubset(ctxt.l, ExternalID.l, SystemID.l) As "_xmlParseExternalSubset"
  xmlParseMarkupDecl(ctxt.l) As "_xmlParseMarkupDecl"
  xmlParseMisc(ctxt.l) As "_xmlParseMisc"
  xmlParseName(ctxt.l) As "_xmlParseName"
  xmlParseNamespace(ctxt.l) As "_xmlParseNamespace"
  xmlParseNmtoken(ctxt.l) As "_xmlParseNmtoken"
  xmlParseNotationDecl(ctxt.l) As "_xmlParseNotationDecl"
  xmlParseNotationType(ctxt.l) As "_xmlParseNotationType"
  xmlParsePEReference(ctxt.l) As "_xmlParsePEReference"
  xmlParsePI(ctxt.l) As "_xmlParsePI"
  xmlParsePITarget(ctxt.l) As "_xmlParsePITarget"
  xmlParsePubidLiteral(ctxt.l) As "_xmlParsePubidLiteral"
  xmlParseQuotedString(ctxt.l) As "_xmlParseQuotedString"
  xmlParseReference(ctxt.l) As "_xmlParseReference"
  xmlParseSDDecl(ctxt.l) As "_xmlParseSDDecl"
  xmlParseStartTag(ctxt.l) As "_xmlParseStartTag"
  xmlParseSystemLiteral(ctxt.l) As "_xmlParseSystemLiteral"
  xmlParseTextDecl(ctxt.l) As "_xmlParseTextDecl"
  xmlParseVersionInfo(ctxt.l) As "_xmlParseVersionInfo"
  xmlParseVersionNum(ctxt.l) As "_xmlParseVersionNum"
  xmlParseXMLDecl(ctxt.l) As "_xmlParseXMLDecl"
  xmlParserHandlePEReference(ctxt.l) As "_xmlParserHandlePEReference"
  xmlParserHandleReference(ctxt.l) As "_xmlParserHandleReference"
  xmlParserInputShrink(in.l) As "_xmlParserInputShrink"
  xmlPopInput(ctxt.l) As "_xmlPopInput"
  xmlPushInput(ctxt.l, input.l) As "_xmlPushInput"
  xmlScanName(ctxt.l) As "_xmlScanName"
  xmlSetEntityReferenceFunc(func.l) As "_xmlSetEntityReferenceFunc"
  xmlSkipBlankChars(ctxt.l) As "_xmlSkipBlankChars"
  xmlSplitQName(ctxt.l, name.l, prefix.l) As "_xmlSplitQName"
  xmlStringCurrentChar(ctxt.l, cur.l, len.l) As "_xmlStringCurrentChar"
  xmlStringDecodeEntities(ctxt.l, str.l, what.l, end_.l, end2.l, end3.l) As "_xmlStringDecodeEntities"
  xmlStringLenDecodeEntities(ctxt.l, str.l, len.l, what.l, end_.l, end2.l, end3.l) As "_xmlStringLenDecodeEntities"
  xmlSwitchEncoding(ctxt.l, enc.l) As "_xmlSwitchEncoding"
  xmlSwitchInputEncoding(ctxt.l, input.l, handler.l) As "_xmlSwitchInputEncoding"
  xmlSwitchToEncoding(ctxt.l, handler.l) As "_xmlSwitchToEncoding"
  ;->pattern: pattern expression handling
  xmlFreePattern(comp.l) As "_xmlFreePattern"
  xmlFreePatternList(comp.l) As "_xmlFreePatternList"
  xmlFreeStreamCtxt(stream.l) As "_xmlFreeStreamCtxt"
  xmlPatternFromRoot(comp.l) As "_xmlPatternFromRoot"
  xmlPatternGetStreamCtxt(comp.l) As "_xmlPatternGetStreamCtxt"
  xmlPatternMatch(comp.l, node.l) As "_xmlPatternMatch"
  xmlPatternMaxDepth(comp.l) As "_xmlPatternMaxDepth"
  xmlPatternMinDepth(comp.l) As "_xmlPatternMinDepth"
  xmlPatternStreamable(comp.l) As "_xmlPatternStreamable"
  xmlPatterncompile(pattern.l, dict.l, flags.l, namespaces.l) As "_xmlPatterncompile"
  xmlStreamPop(stream.l) As "_xmlStreamPop"
  xmlStreamPush(stream.l, name.l, ns.l) As "_xmlStreamPush"
  xmlStreamPushAttr(stream.l, name.l, ns.l) As "_xmlStreamPushAttr"
  xmlStreamPushNode(stream.l, name.l, ns.l, nodeType.l) As "_xmlStreamPushNode"
  xmlStreamWantsAnyNode(streamCtxt.l) As "_xmlStreamWantsAnyNode"
  ;->relaxng: implementation of the Relax-NG validation
  xmlRelaxNGCleanupTypes() As "_xmlRelaxNGCleanupTypes"
  xmlRelaxNGDump(output.l, schema.l) As "_xmlRelaxNGDump"
  xmlRelaxNGDumpTree(output.l, schema.l) As "_xmlRelaxNGDumpTree"
  xmlRelaxNGFree(schema.l) As "_xmlRelaxNGFree"
  xmlRelaxNGFreeParserCtxt(ctxt.l) As "_xmlRelaxNGFreeParserCtxt"
  xmlRelaxNGFreeValidCtxt(ctxt.l) As "_xmlRelaxNGFreeValidCtxt"
  xmlRelaxNGGetParserErrors(ctxt.l, err.l, warn.l, ctx.l) As "_xmlRelaxNGGetParserErrors"
  xmlRelaxNGGetValidErrors(ctxt.l, err.l, warn.l, ctx.l) As "_xmlRelaxNGGetValidErrors"
  xmlRelaxNGInitTypes() As "_xmlRelaxNGInitTypes"
  xmlRelaxNGNewDocParserCtxt(doc.l) As "_xmlRelaxNGNewDocParserCtxt"
  xmlRelaxNGNewMemParserCtxt(buffer.l, size.l) As "_xmlRelaxNGNewMemParserCtxt"
  xmlRelaxNGNewParserCtxt(url.l) As "_xmlRelaxNGNewParserCtxt"
  xmlRelaxNGNewValidCtxt(schema.l) As "_xmlRelaxNGNewValidCtxt"
  xmlRelaxNGParse(ctxt.l) As "_xmlRelaxNGParse"
  xmlRelaxNGSetParserErrors(ctxt.l, err.l, warn.l, ctx.l) As "_xmlRelaxNGSetParserErrors"
  xmlRelaxNGSetParserStructuredErrors(ctxt.l, serror.l, ctx.l) As "_xmlRelaxNGSetParserStructuredErrors"
  xmlRelaxNGSetValidErrors(ctxt.l, err.l, warn.l, ctx.l) As "_xmlRelaxNGSetValidErrors"
  xmlRelaxNGSetValidStructuredErrors(ctxt.l, serror.l, ctx.l) As "_xmlRelaxNGSetValidStructuredErrors"
  xmlRelaxNGValidateDoc(ctxt.l, doc.l) As "_xmlRelaxNGValidateDoc"
  xmlRelaxNGValidateFullElement(ctxt.l, doc.l, elem.l) As "_xmlRelaxNGValidateFullElement"
  xmlRelaxNGValidatePopElement(ctxt.l, doc.l, elem.l) As "_xmlRelaxNGValidatePopElement"
  xmlRelaxNGValidatePushCData(ctxt.l, data_.l, len.l) As "_xmlRelaxNGValidatePushCData"
  xmlRelaxNGValidatePushElement(ctxt.l, doc.l, elem.l) As "_xmlRelaxNGValidatePushElement"
  xmlRelaxParserSetFlag(ctxt.l, flags.l) As "_xmlRelaxParserSetFlag"
  ;->schemasInternals: internal interfaces For XML Schemas
  xmlSchemaFreeType(type.l) As "_xmlSchemaFreeType"
  xmlSchemaFreeWildcard(wildcard.l) As "_xmlSchemaFreeWildcard"
  ;->schematron: XML Schemastron implementation
  xmlSchematronFree(schema.l) As "_xmlSchematronFree"
  xmlSchematronFreeParserCtxt(ctxt.l) As "_xmlSchematronFreeParserCtxt"
  xmlSchematronFreeValidCtxt(ctxt.l) As "_xmlSchematronFreeValidCtxt"
  xmlSchematronNewDocParserCtxt(doc.l) As "_xmlSchematronNewDocParserCtxt"
  xmlSchematronNewMemParserCtxt(buffer.l, size.l) As "_xmlSchematronNewMemParserCtxt"
  xmlSchematronNewParserCtxt(URL.l) As "_xmlSchematronNewParserCtxt"
  xmlSchematronNewValidCtxt(schema.l, options.l) As "_xmlSchematronNewValidCtxt"
  xmlSchematronParse(ctxt.l) As "_xmlSchematronParse"
  xmlSchematronValidateDoc(ctxt.l, instance.l) As "_xmlSchematronValidateDoc"
  ;->threads: interfaces For thread handling
  xmlCleanupThreads() As "_xmlCleanupThreads"
  xmlFreeMutex(tok.l) As "_xmlFreeMutex"
  xmlFreeRMutex(tok.l) As "_xmlFreeRMutex"
  xmlGetGlobalState() As "_xmlGetGlobalState"
  xmlGetThreadId() As "_xmlGetThreadId"
  xmlInitThreads() As "_xmlInitThreads"
  xmlIsMainThread() As "_xmlIsMainThread"
  xmlLockLibrary() As "_xmlLockLibrary"
  xmlMutexLock(tok.l) As "_xmlMutexLock"
  xmlMutexUnlock(tok.l) As "_xmlMutexUnlock"
  xmlNewMutex() As "_xmlNewMutex"
  xmlNewRMutex() As "_xmlNewRMutex"
  xmlRMutexLock(tok.l) As "_xmlRMutexLock"
  xmlRMutexUnlock(tok.l) As "_xmlRMutexUnlock"
  xmlUnlockLibrary() As "_xmlUnlockLibrary"
  ;->tree: interfaces For tree manipulation
  xmlAddChild(parent.l, cur.l) As "_xmlAddChild"
  xmlAddChildList(parent.l, cur.l) As "_xmlAddChildList"
  xmlAddNextSibling(cur.l, elem.l) As "_xmlAddNextSibling"
  xmlAddPrevSibling(cur.l, elem.l) As "_xmlAddPrevSibling"
  xmlAddSibling(cur.l, elem.l) As "_xmlAddSibling"
  xmlAttrSerializeTxtContent(buf.l, doc.l, attr.l, string.l) As "_xmlAttrSerializeTxtContent"
  xmlBufferAdd(buf.l, str.l, len.l) As "_xmlBufferAdd"
  xmlBufferAddHead(buf.l, str.l, len.l) As "_xmlBufferAddHead"
  xmlBufferCCat(buf.l, str.l) As "_xmlBufferCCat"
  xmlBufferCat(buf.l, str.l) As "_xmlBufferCat"
  xmlBufferContent(buf.l) As "_xmlBufferContent"
  xmlBufferCreate() As "_xmlBufferCreate"
  xmlBufferCreateSize(size.l) As "_xmlBufferCreateSize"
  xmlBufferCreateStatic(mem.l, size.l) As "_xmlBufferCreateStatic"
  xmlBufferDump(file.l, buf.l) As "_xmlBufferDump"
  xmlBufferEmpty(buf.l) As "_xmlBufferEmpty"
  xmlBufferFree(buf.l) As "_xmlBufferFree"
  xmlBufferGrow(buf.l, len.l) As "_xmlBufferGrow"
  xmlBufferLength(buf.l) As "_xmlBufferLength"
  xmlBufferResize(buf.l, size.l) As "_xmlBufferResize"
  xmlBufferSetAllocationScheme(buf.l, scheme.l) As "_xmlBufferSetAllocationScheme"
  xmlBufferShrink(buf.l, len.l) As "_xmlBufferShrink"
  xmlBufferWriteCHAR(buf.l, string.l) As "_xmlBufferWriteCHAR"
  xmlBufferWriteChar_(buf.l, string.l) As "_xmlBufferWriteChar"
  xmlBufferWriteQuotedString(buf.l, string.l) As "_xmlBufferWriteQuotedString"
  xmlBuildQName(ncname.l, prefix.l, memory.l, len.l) As "_xmlBuildQName"
  xmlCopyDoc(doc.l, recursive.l) As "_xmlCopyDoc"
  xmlCopyDtd(dtd.l) As "_xmlCopyDtd"
  xmlCopyNamespace(cur.l) As "_xmlCopyNamespace"
  xmlCopyNamespaceList(cur.l) As "_xmlCopyNamespaceList"
  xmlCopyNode(node.l, extended.l) As "_xmlCopyNode"
  xmlCopyNodeList(node.l) As "_xmlCopyNodeList"
  xmlCopyProp(target.l, cur.l) As "_xmlCopyProp"
  xmlCopyPropList(target.l, cur.l) As "_xmlCopyPropList"
  xmlCreateIntSubset(doc.l, name.l, ExternalID.l, SystemID.l) As "_xmlCreateIntSubset"
  xmlDOMWrapAdoptNode(ctxt.l, sourceDoc.l, node.l, destDoc.l, destParent.l, options.l) As "_xmlDOMWrapAdoptNode"
  xmlDOMWrapCloneNode(ctxt.l, sourceDoc.l, node.l, resNode.l, destDoc.l, destParent.l, deep.l, options.l) As "_xmlDOMWrapCloneNode"
  xmlDOMWrapFreeCtxt(ctxt.l) As "_xmlDOMWrapFreeCtxt"
  xmlDOMWrapNewCtxt() As "_xmlDOMWrapNewCtxt"
  xmlDOMWrapReconcileNamespaces(ctxt.l, elem.l, options.l) As "_xmlDOMWrapReconcileNamespaces"
  xmlDOMWrapRemoveNode(ctxt.l, doc.l, node.l, options.l) As "_xmlDOMWrapRemoveNode"
  xmlDocCopyNode(node.l, doc.l, extended.l) As "_xmlDocCopyNode"
  xmlDocCopyNodeList(node.l, doc.l) As "_xmlDocCopyNodeList"
  xmlDocDump(f.l, cur.l) As "_xmlDocDump"
  xmlDocDumpFormatMemory(cur.l, mem.l, size.l, format.l) As "_xmlDocDumpFormatMemory"
  xmlDocDumpFormatMemoryEnc(out_doc.l, doc_txt_ptr.l, doc_txt_len.l, txt_encoding.l, format.l) As "_xmlDocDumpFormatMemoryEnc"
  xmlDocDumpMemory(cur.l, mem.l, size.l) As "_xmlDocDumpMemory"
  xmlDocDumpMemoryEnc(out_doc.l, doc_txt_ptr.l, doc_txt_len.l, txt_encoding.l) As "_xmlDocDumpMemoryEnc"
  xmlDocFormatDump(f.l, cur.l, format.l) As "_xmlDocFormatDump"
  xmlDocGetRootElement(doc.l) As "_xmlDocGetRootElement"
  xmlDocSetRootElement(doc.l, root.l) As "_xmlDocSetRootElement"
  xmlElemDump(f.l, doc.l, cur.l) As "_xmlElemDump"
  xmlFreeDoc(cur.l) As "_xmlFreeDoc"
  xmlFreeDtd(cur.l) As "_xmlFreeDtd"
  xmlFreeNode(cur.l) As "_xmlFreeNode"
  xmlFreeNodeList(cur.l) As "_xmlFreeNodeList"
  xmlFreeNs(cur.l) As "_xmlFreeNs"
  xmlFreeNsList(cur.l) As "_xmlFreeNsList"
  xmlFreeProp(cur.l) As "_xmlFreeProp"
  xmlFreePropList(cur.l) As "_xmlFreePropList"
  xmlGetBufferAllocationScheme() As "_xmlGetBufferAllocationScheme"
  xmlGetCompressMode() As "_xmlGetCompressMode"
  xmlGetDocCompressMode(doc.l) As "_xmlGetDocCompressMode"
  xmlGetIntSubset(doc.l) As "_xmlGetIntSubset"
  xmlGetLastChild(parent.l) As "_xmlGetLastChild"
  xmlGetLineNo(node.l) As "_xmlGetLineNo"
  xmlGetNoNsProp(node.l, name.l) As "_xmlGetNoNsProp"
  xmlGetNodePath(node.l) As "_xmlGetNodePath"
  xmlGetNsList(doc.l, node.l) As "_xmlGetNsList"
  xmlGetNsProp(node.l, name.l, namespace.l) As "_xmlGetNsProp"
  xmlGetProp(node.l, name.l) As "_xmlGetProp"
  xmlHasNsProp(node.l, name.l, namespace.l) As "_xmlHasNsProp"
  xmlHasProp(node.l, name.l) As "_xmlHasProp"
  xmlIsBlankNode(node.l) As "_xmlIsBlankNode"
  xmlIsXHTML(systemID.l, publicID.l) As "_xmlIsXHTML"
  xmlNewCDataBlock(doc.l, content.l, len.l) As "_xmlNewCDataBlock"
  xmlNewCharRef(doc.l, name.l) As "_xmlNewCharRef"
  xmlNewChild(parent.l, ns.l, name.l, content.l) As "_xmlNewChild"
  xmlNewComment(content.l) As "_xmlNewComment"
  xmlNewDoc(version.l) As "_xmlNewDoc"
  xmlNewDocComment(doc.l, content.l) As "_xmlNewDocComment"
  xmlNewDocFragment(doc.l) As "_xmlNewDocFragment"
  xmlNewDocNode(doc.l, ns.l, name.l, content.l) As "_xmlNewDocNode"
  xmlNewDocNodeEatName(doc.l, ns.l, name.l, content.l) As "_xmlNewDocNodeEatName"
  xmlNewDocPI(doc.l, name.l, content.l) As "_xmlNewDocPI"
  xmlNewDocProp(doc.l, name.l, value.l) As "_xmlNewDocProp"
  xmlNewDocRawNode(doc.l, ns.l, name.l, content.l) As "_xmlNewDocRawNode"
  xmlNewDocText(doc.l, content.l) As "_xmlNewDocText"
  xmlNewDocTextLen(doc.l, content.l, len.l) As "_xmlNewDocTextLen"
  xmlNewDtd(doc.l, name.l, ExternalID.l, SystemID.l) As "_xmlNewDtd"
  xmlNewGlobalNs(doc.l, href.l, prefix.l) As "_xmlNewGlobalNs"
  xmlNewNode(ns.l, name.l) As "_xmlNewNode"
  xmlNewNodeEatName(ns.l, name.l) As "_xmlNewNodeEatName"
  xmlNewNs(node.l, href.l, prefix.l) As "_xmlNewNs"
  xmlNewNsProp(node.l, ns.l, name.l, value.l) As "_xmlNewNsProp"
  xmlNewNsPropEatName(node.l, ns.l, name.l, value.l) As "_xmlNewNsPropEatName"
  xmlNewPI(name.l, content.l) As "_xmlNewPI"
  xmlNewProp(node.l, name.l, value.l) As "_xmlNewProp"
  xmlNewReference(doc.l, name.l) As "_xmlNewReference"
  xmlNewText(content.l) As "_xmlNewText"
  xmlNewTextChild(parent.l, ns.l, name.l, content.l) As "_xmlNewTextChild"
  xmlNewTextLen(content.l, len.l) As "_xmlNewTextLen"
  xmlNodeAddContent(cur.l, content.l) As "_xmlNodeAddContent"
  xmlNodeAddContentLen(cur.l, content.l, len.l) As "_xmlNodeAddContentLen"
  xmlNodeBufGetContent(buffer.l, cur.l) As "_xmlNodeBufGetContent"
  xmlNodeDump(buf.l, doc.l, cur.l, level.l, format.l) As "_xmlNodeDump"
  xmlNodeDumpOutput(buf.l, doc.l, cur.l, level.l, format.l, encoding.l) As "_xmlNodeDumpOutput"
  xmlNodeGetBase(doc.l, cur.l) As "_xmlNodeGetBase"
  xmlNodeGetContent(cur.l) As "_xmlNodeGetContent"
  xmlNodeGetLang(cur.l) As "_xmlNodeGetLang"
  xmlNodeGetSpacePreserve(cur.l) As "_xmlNodeGetSpacePreserve"
  xmlNodeIsText(node.l) As "_xmlNodeIsText"
  xmlNodeListGetRawString(doc.l, list.l, inLine.l) As "_xmlNodeListGetRawString"
  xmlNodeListGetString(doc.l, list.l, inLine.l) As "_xmlNodeListGetString"
  xmlNodeSetBase(cur.l, uri.l) As "_xmlNodeSetBase"
  xmlNodeSetContent(cur.l, content.l) As "_xmlNodeSetContent"
  xmlNodeSetContentLen(cur.l, content.l, len.l) As "_xmlNodeSetContentLen"
  xmlNodeSetLang(cur.l, lang.l) As "_xmlNodeSetLang"
  xmlNodeSetName(cur.l, name.l) As "_xmlNodeSetName"
  xmlNodeSetSpacePreserve(cur.l, val.l) As "_xmlNodeSetSpacePreserve"
  xmlReconciliateNs(doc.l, tree.l) As "_xmlReconciliateNs"
  xmlRemoveProp(cur.l) As "_xmlRemoveProp"
  xmlReplaceNode(old.l, cur.l) As "_xmlReplaceNode"
  xmlSaveFile(filename.l, cur.l) As "_xmlSaveFile"
  xmlSaveFileEnc(filename.l, cur.l, encoding.l) As "_xmlSaveFileEnc"
  xmlSaveFileTo(buf.l, cur.l, encoding.l) As "_xmlSaveFileTo"
  xmlSaveFormatFile(filename.l, cur.l, format.l) As "_xmlSaveFormatFile"
  xmlSaveFormatFileEnc(filename.l, cur.l, encoding.l, format.l) As "_xmlSaveFormatFileEnc"
  xmlSaveFormatFileTo(buf.l, cur.l, encoding.l, format.l) As "_xmlSaveFormatFileTo"
  xmlSearchNs(doc.l, node.l, nameSpace.l) As "_xmlSearchNs"
  xmlSearchNsByHref(doc.l, node.l, href.l) As "_xmlSearchNsByHref"
  xmlSetBufferAllocationScheme(scheme.l) As "_xmlSetBufferAllocationScheme"
  xmlSetCompressMode(mode.l) As "_xmlSetCompressMode"
  xmlSetDocCompressMode(doc.l, mode.l) As "_xmlSetDocCompressMode"
  xmlSetListDoc(list.l, doc.l) As "_xmlSetListDoc"
  xmlSetNs(node.l, ns.l) As "_xmlSetNs"
  xmlSetNsProp(node.l, ns.l, name.l, value.l) As "_xmlSetNsProp"
  xmlSetProp(node.l, name.l, value.l) As "_xmlSetProp"
  xmlSetTreeDoc(tree.l, doc.l) As "_xmlSetTreeDoc"
  xmlSplitQName2(name.l, prefix.l) As "_xmlSplitQName2"
  xmlSplitQName3(name.l, len.l) As "_xmlSplitQName3"
  xmlStringGetNodeList(doc.l, value.l) As "_xmlStringGetNodeList"
  xmlStringLenGetNodeList(doc.l, value.l, len.l) As "_xmlStringLenGetNodeList"
  xmlTextConcat(node.l, content.l, len.l) As "_xmlTextConcat"
  xmlTextMerge(first.l, second.l) As "_xmlTextMerge"
  xmlUnlinkNode(cur.l) As "_xmlUnlinkNode"
  xmlUnsetNsProp(node.l, ns.l, name.l) As "_xmlUnsetNsProp"
  xmlUnsetProp(node.l, name.l) As "_xmlUnsetProp"
  xmlValidateNCName(value.l, space.l) As "_xmlValidateNCName"
  xmlValidateNMToken(value.l, space.l) As "_xmlValidateNMToken"
  xmlValidateName(value.l, space.l) As "_xmlValidateName"
  xmlValidateQName(value.l, space.l) As "_xmlValidateQName"
  ;->uri: library of generic URI related routines
  xmlBuildRelativeURI(URI.l, base.l) As "_xmlBuildRelativeURI"
  xmlBuildURI(URI.l, base.l) As "_xmlBuildURI"
  xmlCanonicPath(path.l) As "_xmlCanonicPath"
  xmlCreateURI() As "_xmlCreateURI"
  xmlFreeURI(uri.l) As "_xmlFreeURI"
  xmlNormalizeURIPath(path.l) As "_xmlNormalizeURIPath"
  xmlParseURI(str.l) As "_xmlParseURI"
  xmlParseURIRaw(str.l, raw.l) As "_xmlParseURIRaw"
  xmlParseURIReference(uri.l, str.l) As "_xmlParseURIReference"
  xmlPathToURI(path.l) As "_xmlPathToURI"
  xmlPrintURI(stream.l, uri.l) As "_xmlPrintURI"
  xmlSaveUri(uri.l) As "_xmlSaveUri"
  xmlURIEscape(str.l) As "_xmlURIEscape"
  xmlURIEscapeStr(str.l, list.l) As "_xmlURIEscapeStr"
  xmlURIUnescapeString(str.l, len.l, target.l) As "_xmlURIUnescapeString"
  ;->valid: The DTD validation
  xmlAddAttributeDecl(ctxt.l, dtd.l, elem.l, name.l, ns.l, type.l, def.l, defaultValue.l, tree.l) As "_xmlAddAttributeDecl"
  xmlAddElementDecl(ctxt.l, dtd.l, name.l, type.l, content.l) As "_xmlAddElementDecl"
  xmlAddID(ctxt.l, doc.l, value.l, attr.l) As "_xmlAddID"
  xmlAddNotationDecl(ctxt.l, dtd.l, name.l, PublicID.l, SystemID.l) As "_xmlAddNotationDecl"
  xmlAddRef(ctxt.l, doc.l, value.l, attr.l) As "_xmlAddRef"
  xmlCopyAttributeTable(table.l) As "_xmlCopyAttributeTable"
  xmlCopyDocElementContent(doc.l, cur.l) As "_xmlCopyDocElementContent"
  xmlCopyElementContent(cur.l) As "_xmlCopyElementContent"
  xmlCopyElementTable(table.l) As "_xmlCopyElementTable"
  xmlCopyEnumeration(cur.l) As "_xmlCopyEnumeration"
  xmlCopyNotationTable(table.l) As "_xmlCopyNotationTable"
  xmlCreateEnumeration(name.l) As "_xmlCreateEnumeration"
  xmlDumpAttributeDecl(buf.l, attr.l) As "_xmlDumpAttributeDecl"
  xmlDumpAttributeTable(buf.l, table.l) As "_xmlDumpAttributeTable"
  xmlDumpElementDecl(buf.l, elem.l) As "_xmlDumpElementDecl"
  xmlDumpElementTable(buf.l, table.l) As "_xmlDumpElementTable"
  xmlDumpNotationDecl(buf.l, nota.l) As "_xmlDumpNotationDecl"
  xmlDumpNotationTable(buf.l, table.l) As "_xmlDumpNotationTable"
  xmlFreeAttributeTable(table.l) As "_xmlFreeAttributeTable"
  xmlFreeDocElementContent(doc.l, cur.l) As "_xmlFreeDocElementContent"
  xmlFreeElementContent(cur.l) As "_xmlFreeElementContent"
  xmlFreeElementTable(table.l) As "_xmlFreeElementTable"
  xmlFreeEnumeration(cur.l) As "_xmlFreeEnumeration"
  xmlFreeIDTable(table.l) As "_xmlFreeIDTable"
  xmlFreeNotationTable(table.l) As "_xmlFreeNotationTable"
  xmlFreeRefTable(table.l) As "_xmlFreeRefTable"
  xmlFreeValidCtxt(cur.l) As "_xmlFreeValidCtxt"
  xmlGetDtdAttrDesc(dtd.l, elem.l, name.l) As "_xmlGetDtdAttrDesc"
  xmlGetDtdElementDesc(dtd.l, name.l) As "_xmlGetDtdElementDesc"
  xmlGetDtdNotationDesc(dtd.l, name.l) As "_xmlGetDtdNotationDesc"
  xmlGetDtdQAttrDesc(dtd.l, elem.l, name.l, prefix.l) As "_xmlGetDtdQAttrDesc"
  xmlGetDtdQElementDesc(dtd.l, name.l, prefix.l) As "_xmlGetDtdQElementDesc"
  xmlGetID(doc.l, ID.l) As "_xmlGetID"
  xmlGetRefs(doc.l, ID.l) As "_xmlGetRefs"
  xmlIsID(doc.l, elem.l, attr.l) As "_xmlIsID"
  xmlIsMixedElement(doc.l, name.l) As "_xmlIsMixedElement"
  xmlIsRef(doc.l, elem.l, attr.l) As "_xmlIsRef"
  xmlNewDocElementContent(doc.l, name.l, type.l) As "_xmlNewDocElementContent"
  xmlNewElementContent(name.l, type.l) As "_xmlNewElementContent"
  xmlNewValidCtxt() As "_xmlNewValidCtxt"
  xmlRemoveID(doc.l, attr.l) As "_xmlRemoveID"
  xmlRemoveRef(doc.l, attr.l) As "_xmlRemoveRef"
  xmlSnprintfElementContent(buf.l, size.l, content.l, englob.l) As "_xmlSnprintfElementContent"
  xmlSprintfElementContent(buf.l, content.l, englob.l) As "_xmlSprintfElementContent"
  xmlValidBuildContentModel(ctxt.l, elem.l) As "_xmlValidBuildContentModel"
  xmlValidCtxtNormalizeAttributeValue(ctxt.l, doc.l, elem.l, name.l, value.l) As "_xmlValidCtxtNormalizeAttributeValue"
  xmlValidGetPotentialChildren(ctree.l, names.l, len.l, max.l) As "_xmlValidGetPotentialChildren"
  xmlValidGetValidElements(prev.l, next_.l, names.l, max.l) As "_xmlValidGetValidElements"
  xmlValidNormalizeAttributeValue(doc.l, elem.l, name.l, value.l) As "_xmlValidNormalizeAttributeValue"
  xmlValidateAttributeDecl(ctxt.l, doc.l, attr.l) As "_xmlValidateAttributeDecl"
  xmlValidateAttributeValue(type.l, value.l) As "_xmlValidateAttributeValue"
  xmlValidateDocument(ctxt.l, doc.l) As "_xmlValidateDocument"
  xmlValidateDocumentFinal(ctxt.l, doc.l) As "_xmlValidateDocumentFinal"
  xmlValidateDtd(ctxt.l, doc.l, dtd.l) As "_xmlValidateDtd"
  xmlValidateDtdFinal(ctxt.l, doc.l) As "_xmlValidateDtdFinal"
  xmlValidateElement(ctxt.l, doc.l, elem.l) As "_xmlValidateElement"
  xmlValidateElementDecl(ctxt.l, doc.l, elem.l) As "_xmlValidateElementDecl"
  xmlValidateNameValue(value.l) As "_xmlValidateNameValue"
  xmlValidateNamesValue(value.l) As "_xmlValidateNamesValue"
  xmlValidateNmtokenValue(value.l) As "_xmlValidateNmtokenValue"
  xmlValidateNmtokensValue(value.l) As "_xmlValidateNmtokensValue"
  xmlValidateNotationDecl(ctxt.l, doc.l, nota.l) As "_xmlValidateNotationDecl"
  xmlValidateNotationUse(ctxt.l, doc, notationName.l) As "_xmlValidateNotationUse"
  xmlValidateOneAttribute(ctxt.l, doc.l, elem.l, attr.l, value.l) As "_xmlValidateOneAttribute"
  xmlValidateOneElement(ctxt.l, doc.l, elem.l) As "_xmlValidateOneElement"
  xmlValidateOneNamespace(ctx.l, doc.l, elem.l, prefix.l, ns.l, value.l) As "_xmlValidateOneNamespace"
  xmlValidatePopElement(ctxt.l, doc.l, elem.l, qname.l) As "_xmlValidatePopElement"
  xmlValidatePushCData(ctxt.l, data_.l, len.l) As "_xmlValidatePushCData"
  xmlValidatePushElement(ctxt.l, doc.l, elem.l, qname.l) As "_xmlValidatePushElement"
  xmlValidateRoot(ctxt.l, doc.l) As "_xmlValidateRoot"
  ;->xinclude: implementation of XInclude
  xmlXIncludeFreeContext(ctxt.l) As "_xmlXIncludeFreeContext"
  xmlXIncludeNewContext(doc.l) As "_xmlXIncludeNewContext"
  xmlXIncludeProcess(doc.l) As "_xmlXIncludeProcess"
  xmlXIncludeProcessFlags(doc.l, flags.l) As "_xmlXIncludeProcessFlags"
  xmlXIncludeProcessFlagsData(doc.l, flags.l, data_.l) As "_xmlXIncludeProcessFlagsData"
  xmlXIncludeProcessNode(ctxt.l, node.l) As "_xmlXIncludeProcessNode"
  xmlXIncludeProcessTree(tree.l) As "_xmlXIncludeProcessTree"
  xmlXIncludeProcessTreeFlags(tree.l, flags.l) As "_xmlXIncludeProcessTreeFlags"
  xmlXIncludeSetFlags(ctxt.l, flags.l) As "_xmlXIncludeSetFlags"
  ;->xlink: unfinished XLink detection module
  xlinkGetDefaultDetect() As "_xlinkGetDefaultDetect"
  xlinkGetDefaultHandler() As "_xlinkGetDefaultHandler"
  xlinkIsLink(doc.l, node.l) As "_xlinkIsLink"
  xlinkSetDefaultDetect(func.l) As "_xlinkSetDefaultDetect"
  xlinkSetDefaultHandler(handler.l) As "_xlinkSetDefaultHandler"
  ;->xmlIO: Interface For the I/O interfaces used by the parser
  xmlAllocOutputBuffer(encoder.l) As "_xmlAllocOutputBuffer"
  xmlAllocParserInputBuffer(enc.l) As "_xmlAllocParserInputBuffer"
  xmlCheckFilename(path.l) As "_xmlCheckFilename"
  xmlCheckHTTPInput(ctxt.l, ret.l) As "_xmlCheckHTTPInput"
  xmlCleanupInputCallbacks() As "_xmlCleanupInputCallbacks"
  xmlCleanupOutputCallbacks() As "_xmlCleanupOutputCallbacks"
  xmlFileClose(context.l) As "_xmlFileClose"
  xmlFileMatch(filename.l) As "_xmlFileMatch"
  xmlFileOpen(filename.l) As "_xmlFileOpen"
  xmlFileRead(context.l, buffer.l, len.l) As "_xmlFileRead"
  xmlFreeParserInputBuffer(in.l) As "_xmlFreeParserInputBuffer"
  xmlIOFTPClose(context.l) As "_xmlIOFTPClose"
  xmlIOFTPMatch(filename.l) As "_xmlIOFTPMatch"
  xmlIOFTPOpen(filename.l) As "_xmlIOFTPOpen"
  xmlIOFTPRead(context.l, buffer.l, len.l) As "_xmlIOFTPRead"
  xmlIOHTTPClose(context.l) As "_xmlIOHTTPClose"
  xmlIOHTTPMatch(filename.l) As "_xmlIOHTTPMatch"
  xmlIOHTTPOpen(filename.l) As "_xmlIOHTTPOpen"
  xmlIOHTTPOpenW(post_uri.l, compression.l) As "_xmlIOHTTPOpenW"
  xmlIOHTTPRead(context, buffer.l, len.l) As "_xmlIOHTTPRead"
  xmlNoNetExternalEntityLoader(URL.l, ID.l, ctxt.l) As "_xmlNoNetExternalEntityLoader"
  xmlNormalizeWindowsPath(path.l) As "_xmlNormalizeWindowsPath"
  xmlOutputBufferClose(out.l) As "_xmlOutputBufferClose"
  xmlOutputBufferCreateBuffer(buffer.l, encoder.l) As "_xmlOutputBufferCreateBuffer"
  xmlOutputBufferCreateFd(fd.l, encoder.l) As "_xmlOutputBufferCreateFd"
  xmlOutputBufferCreateFile(file.l, encoder.l) As "_xmlOutputBufferCreateFile"
  xmlOutputBufferCreateFilename(URI.l, encoder.l, compression.l) As "_xmlOutputBufferCreateFilename"
  xmlOutputBufferCreateIO(iowrite.l, ioclose.l, ioctx.l, encoder.l) As "_xmlOutputBufferCreateIO"
  xmlOutputBufferFlush(out.l) As "_xmlOutputBufferFlush"
  xmlOutputBufferWrite(out.l, len.l, buf.l) As "_xmlOutputBufferWrite"
  xmlOutputBufferWriteEscape(out.l, str.l, escaping.l) As "_xmlOutputBufferWriteEscape"
  xmlOutputBufferWriteString(out.l, str.l) As "_xmlOutputBufferWriteString"
  xmlParserGetDirectory(filename.l) As "_xmlParserGetDirectory"
  xmlParserInputBufferCreateFd(fd.l, enc.l) As "_xmlParserInputBufferCreateFd"
  xmlParserInputBufferCreateFile(file.l, enc.l) As "_xmlParserInputBufferCreateFile"
  xmlParserInputBufferCreateFilename(URI.l, enc.l) As "_xmlParserInputBufferCreateFilename"
  xmlParserInputBufferCreateIO(ioread.l, ioclose.l, ioctx.l, enc.l) As "_xmlParserInputBufferCreateIO"
  xmlParserInputBufferCreateMem(mem.l, size.l, enc.l) As "_xmlParserInputBufferCreateMem"
  xmlParserInputBufferCreateStatic(mem.l, size.l, enc.l) As "_xmlParserInputBufferCreateStatic"
  xmlParserInputBufferGrow(in.l, len.l) As "_xmlParserInputBufferGrow"
  xmlParserInputBufferPush(in.l, len.l, buf.l) As "_xmlParserInputBufferPush"
  xmlParserInputBufferRead(in.l, len.l) As "_xmlParserInputBufferRead"
  xmlPopInputCallbacks() As "_xmlPopInputCallbacks"
  xmlRegisterDefaultInputCallbacks() As "_xmlRegisterDefaultInputCallbacks"
  xmlRegisterDefaultOutputCallbacks() As "_xmlRegisterDefaultOutputCallbacks"
  xmlRegisterHTTPPostCallbacks() As "_xmlRegisterHTTPPostCallbacks"
  xmlRegisterInputCallbacks(matchFunc.l, openFunc.l, readFunc.l, closeFunc.l) As "_xmlRegisterInputCallbacks"
  xmlRegisterOutputCallbacks(matchFunc.l, openFunc.l, readFunc.l, closeFunc.l) As "_xmlRegisterOutputCallbacks"
  ;->xmlautomata: API To build regexp automata
  xmlAutomataCompile(am.l) As "_xmlAutomataCompile"
  xmlAutomataGetInitState(am.l) As "_xmlAutomataGetInitState"
  xmlAutomataIsDeterminist(am.l) As "_xmlAutomataIsDeterminist"
  xmlAutomataNewAllTrans(am.l, from.l, to_.l, lax.l) As "_xmlAutomataNewAllTrans"
  xmlAutomataNewCountTrans(am.l, from.l, to_.l, token.l, min.l, max.l, data_.l) As "_xmlAutomataNewCountTrans"
  xmlAutomataNewCountTrans2(am.l, from.l, to_.l, token.l, token2.l, min.l, max.l, data_.l) As "_xmlAutomataNewCountTrans2"
  xmlAutomataNewCountedTrans(am.l, from.l, to_.l, counter.l) As "_xmlAutomataNewCountedTrans"
  xmlAutomataNewCounter(am.l, min.l, max.l) As "_xmlAutomataNewCounter"
  xmlAutomataNewCounterTrans(am.l, from.l, to_.l,  counter.l) As "_xmlAutomataNewCounterTrans"
  xmlAutomataNewEpsilon(am.l, from.l, to_.l) As "_xmlAutomataNewEpsilon"
  xmlAutomataNewNegTrans(am.l, from.l, to_.l, token.l, token2.l, data_.l) As "_xmlAutomataNewNegTrans"
  xmlAutomataNewOnceTrans(am.l, from.l, to_.l, token.l, min.l, max.l, data_.l) As "_xmlAutomataNewOnceTrans"
  xmlAutomataNewOnceTrans2(am.l, from.l, to_.l, token.l, token2.l, min.l, max.l, data_.l) As "_xmlAutomataNewOnceTrans2"
  xmlAutomataNewState(am.l) As "_xmlAutomataNewState"
  xmlAutomataNewTransition(am.l, from.l, to_.l, token.l, data_.l) As "_xmlAutomataNewTransition"
  xmlAutomataNewTransition2(am.l, from.l, to_.l, token.l, token2.l, data_.l) As "_xmlAutomataNewTransition2"
  xmlAutomataSetFinalState(am.l, state.l) As "_xmlAutomataSetFinalState"
  xmlFreeAutomata(am.l) As "_xmlFreeAutomata"
  xmlNewAutomata() As "_xmlNewAutomata"
  ;->xmlerror: error handling
  initGenericErrorDefaultFunc(handler.l) As "_initGenericErrorDefaultFunc"
  xmlCopyError(from.l, to_.l) As "_xmlCopyError"
  xmlCtxtGetLastError(ctx.l) As "_xmlCtxtGetLastError"
  xmlCtxtResetLastError(ctx.l) As "_xmlCtxtResetLastError"
  xmlGetLastError() As "_xmlGetLastError"
  xmlParserError(ctx.l, msg.l) As "_xmlParserError"
  xmlParserPrintFileContext(input.l) As "_xmlParserPrintFileContext"
  xmlParserPrintFileInfo(input.l) As "_xmlParserPrintFileInfo"
  xmlParserValidityError(ctx.l, msg.l) As "_xmlParserValidityError"
  xmlParserValidityWarning(ctx.l, msg.l) As "_xmlParserValidityWarning"
  xmlParserWarning(ctx.l, msg.l) As "_xmlParserWarning"
  xmlResetError(err.l) As "_xmlResetError"
  xmlResetLastError() As "_xmlResetLastError"
  xmlSetGenericErrorFunc(ctx.l, handler.l) As "_xmlSetGenericErrorFunc"
  xmlSetStructuredErrorFunc(ctx.l, handler.l) As "_xmlSetStructuredErrorFunc"
  ;->xmlexports: macros For marking symbols As exportable/importable.
  ;->xmlmemory: Interface For the memory allocator
  xmlCleanupMemory(mem.l) As "_xmlCleanupMemory"
  xmlGcMemGet(freeFunc.l, mallocFunc.l, mallocAtomicFunc.l, reallocFunc.l, strdupFunc.l) As "_xmlGcMemGet"
  xmlGcMemSetup(freeFunc.l, mallocFunc.l, mallocAtomicFunc.l, reallocFunc.l, strdupFunc.l) As "_xmlGcMemSetup"
  xmlInitMemory() As "_xmlInitMemory"
  xmlMallocAtomicLoc(size.l, file.l, line.l) As "_xmlMallocAtomicLoc"
  xmlMallocLoc(size.l, file.l, line.l) As "_xmlMallocLoc"
  xmlMemBlocks() As "_xmlMemBlocks"
  xmlMemDisplay(fp.l) As "_xmlMemDisplay"
  xmlMemFree(ptr.l) As "_xmlMemFree"
  xmlMemGet(freeFunc.l, mallocFunc.l, reallocFunc.l, strdupFunc.l) As "_xmlMemGet"
  xmlMemMalloc(size.l) As "_xmlMemMalloc"
  xmlMemRealloc(ptr.l, size.l) As "_xmlMemRealloc"
  xmlMemSetup(freeFunc.l, mallocFunc.l, reallocFunc.l, strdupFunc.l) As "_xmlMemSetup"
  xmlMemShow(fp.l, nr.l) As "_xmlMemShow"
  xmlMemStrdupLoc(str.l, file.l, line.l) As "_xmlMemStrdupLoc"
  xmlMemUsed() As "_xmlMemUsed"
  xmlMemoryDump() As "_xmlMemoryDump"
  xmlMemoryStrdup(str.l) As "_xmlMemoryStrdup"
  xmlReallocLoc(ptr.l, size.l, file.l, line.l) As "_xmlReallocLoc"
  ;->xmlmodule: dynamic module loading
  xmlModuleClose(module.l) As "_xmlModuleClose"
  xmlModuleFree(module.l) As "_xmlModuleFree"
  xmlModuleOpen(name.l, options.l) As "_xmlModuleOpen"
  xmlModuleSymbol(module.l, name.l, symbol.l) As "_xmlModuleSymbol"
  ;->xmlreader: the XMLReader implementation
  xmlFreeTextReader(reader.l) As "_xmlFreeTextReader"
  xmlNewTextReader(input.l, URI.l) As "_xmlNewTextReader"
  xmlNewTextReaderFilename(URI.l) As "_xmlNewTextReaderFilename"
  xmlReaderForDoc(cur.l, URL.l, encoding.l, options.l) As "_xmlReaderForDoc"
  xmlReaderForFd(fd.l, URL.l, encoding.l, options.l) As "_xmlReaderForFd"
  xmlReaderForFile(filename.l, encoding.l, options.l) As "_xmlReaderForFile"
  xmlReaderForIO(ioread.l, ioclose.l, ioctx.l, URL.l, encoding.l, options.l) As "_xmlReaderForIO"
  xmlReaderForMemory(buffer.l, size.l, URL.l, encoding.l, options.l) As "_xmlReaderForMemory"
  xmlReaderNewDoc(reader.l, cur.l, URL.l, encoding.l, options.l) As "_xmlReaderNewDoc"
  xmlReaderNewFd(reader.l, fd.l, URL.l, encoding.l, options.l) As "_xmlReaderNewFd"
  xmlReaderNewFile(reader.l, filename.l, encoding.l, options.l) As "_xmlReaderNewFile"
  xmlReaderNewIO(reader.l, ioread.l, ioclose.l, ioctx.l, URL.l, encoding.l, options.l) As "_xmlReaderNewIO"
  xmlReaderNewMemory(reader.l, buffer.l, size.l, URL.l, encoding.l, options.l) As "_xmlReaderNewMemory"
  xmlReaderNewWalker(reader.l, doc.l) As "_xmlReaderNewWalker"
  xmlReaderWalker(doc.l) As "_xmlReaderWalker"
  xmlTextReaderAttributeCount(reader.l) As "_xmlTextReaderAttributeCount"
  xmlTextReaderBaseUri(reader.l) As "_xmlTextReaderBaseUri"
  xmlTextReaderByteConsumed(reader.l) As "_xmlTextReaderByteConsumed"
  xmlTextReaderClose(reader.l) As "_xmlTextReaderClose"
  xmlTextReaderConstBaseUri(reader.l) As "_xmlTextReaderConstBaseUri"
  xmlTextReaderConstEncoding(reader.l) As "_xmlTextReaderConstEncoding"
  xmlTextReaderConstLocalName(reader.l) As "_xmlTextReaderConstLocalName"
  xmlTextReaderConstName(reader.l) As "_xmlTextReaderConstName"
  xmlTextReaderConstNamespaceUri(reader.l) As "_xmlTextReaderConstNamespaceUri"
  xmlTextReaderConstPrefix(reader.l) As "_xmlTextReaderConstPrefix"
  xmlTextReaderConstString(reader.l, str.l) As "_xmlTextReaderConstString"
  xmlTextReaderConstValue(reader.l) As "_xmlTextReaderConstValue"
  xmlTextReaderConstXmlLang(reader.l) As "_xmlTextReaderConstXmlLang"
  xmlTextReaderConstXmlVersion(reader.l) As "_xmlTextReaderConstXmlVersion"
  xmlTextReaderCurrentDoc(reader.l) As "_xmlTextReaderCurrentDoc"
  xmlTextReaderCurrentNode(reader.l) As "_xmlTextReaderCurrentNode"
  xmlTextReaderDepth(reader.l) As "_xmlTextReaderDepth"
  xmlTextReaderExpand(reader.l) As "_xmlTextReaderExpand"
  xmlTextReaderGetAttribute(reader.l, name.l) As "_xmlTextReaderGetAttribute"
  xmlTextReaderGetAttributeNo(reader.l, no.l) As "_xmlTextReaderGetAttributeNo"
  xmlTextReaderGetAttributeNs(reader.l, localName.l, namespaceURI.l) As "_xmlTextReaderGetAttributeNs"
  xmlTextReaderGetErrorHandler(reader.l, f.l, arg.l) As "_xmlTextReaderGetErrorHandler"
  xmlTextReaderGetParserColumnNumber(reader.l) As "_xmlTextReaderGetParserColumnNumber"
  xmlTextReaderGetParserLineNumber(reader.l) As "_xmlTextReaderGetParserLineNumber"
  xmlTextReaderGetParserProp(reader.l, prop.l) As "_xmlTextReaderGetParserProp"
  xmlTextReaderGetRemainder(reader.l) As "_xmlTextReaderGetRemainder"
  xmlTextReaderHasAttributes(reader.l) As "_xmlTextReaderHasAttributes"
  xmlTextReaderHasValue(reader.l) As "_xmlTextReaderHasValue"
  xmlTextReaderIsDefault(reader.l) As "_xmlTextReaderIsDefault"
  xmlTextReaderIsEmptyElement(reader.l) As "_xmlTextReaderIsEmptyElement"
  xmlTextReaderIsNamespaceDecl(reader.l) As "_xmlTextReaderIsNamespaceDecl"
  xmlTextReaderIsValid(reader.l) As "_xmlTextReaderIsValid"
  xmlTextReaderLocalName(reader.l) As "_xmlTextReaderLocalName"
  xmlTextReaderLocatorBaseURI(locator.l) As "_xmlTextReaderLocatorBaseURI"
  xmlTextReaderLocatorLineNumber(locator.l) As "_xmlTextReaderLocatorLineNumber"
  xmlTextReaderLookupNamespace(reader.l, prefix.l) As "_xmlTextReaderLookupNamespace"
  xmlTextReaderMoveToAttribute(reader.l, name.l) As "_xmlTextReaderMoveToAttribute"
  xmlTextReaderMoveToAttributeNo(reader.l, no.l) As "_xmlTextReaderMoveToAttributeNo"
  xmlTextReaderMoveToAttributeNs(reader.l, localName.l, namespaceURI.l) As "_xmlTextReaderMoveToAttributeNs"
  xmlTextReaderMoveToElement(reader.l) As "_xmlTextReaderMoveToElement"
  xmlTextReaderMoveToFirstAttribute(reader.l) As "_xmlTextReaderMoveToFirstAttribute"
  xmlTextReaderMoveToNextAttribute(reader.l) As "_xmlTextReaderMoveToNextAttribute"
  xmlTextReaderName(reader.l) As "_xmlTextReaderName"
  xmlTextReaderNamespaceUri(reader.l) As "_xmlTextReaderNamespaceUri"
  xmlTextReaderNext(reader.l) As "_xmlTextReaderNext"
  xmlTextReaderNextSibling(reader.l) As "_xmlTextReaderNextSibling"
  xmlTextReaderNodeType(reader.l) As "_xmlTextReaderNodeType"
  xmlTextReaderNormalization(reader.l) As "_xmlTextReaderNormalization"
  xmlTextReaderPrefix(reader.l) As "_xmlTextReaderPrefix"
  xmlTextReaderPreserve(reader.l) As "_xmlTextReaderPreserve"
  xmlTextReaderPreservePattern(reader.l, pattern.l, namespaces.l) As "_xmlTextReaderPreservePattern"
  xmlTextReaderQuoteChar(reader.l) As "_xmlTextReaderQuoteChar"
  xmlTextReaderRead(reader.l) As "_xmlTextReaderRead"
  xmlTextReaderReadAttributeValue(reader.l) As "_xmlTextReaderReadAttributeValue"
  xmlTextReaderReadInnerXml(reader.l) As "_xmlTextReaderReadInnerXml"
  xmlTextReaderReadOuterXml(reader.l) As "_xmlTextReaderReadOuterXml"
  xmlTextReaderReadState(reader.l) As "_xmlTextReaderReadState"
  xmlTextReaderReadString(reader.l) As "_xmlTextReaderReadString"
  xmlTextReaderRelaxNGSetSchema(reader.l, schema.l) As "_xmlTextReaderRelaxNGSetSchema"
  xmlTextReaderRelaxNGValidate(reader.l, rng.l) As "_xmlTextReaderRelaxNGValidate"
  xmlTextReaderSchemaValidate(reader.l, xsd.l) As "_xmlTextReaderSchemaValidate"
  xmlTextReaderSchemaValidateCtxt(reader.l, ctxt.l, options.l) As "_xmlTextReaderSchemaValidateCtxt"
  xmlTextReaderSetErrorHandler(reader.l, f.l, arg.l) As "_xmlTextReaderSetErrorHandler"
  xmlTextReaderSetParserProp(reader.l, prop.l, value.l) As "_xmlTextReaderSetParserProp"
  xmlTextReaderSetSchema(reader.l, schema.l) As "_xmlTextReaderSetSchema"
  xmlTextReaderSetStructuredErrorHandler(reader.l, f.l, arg.l) As "_xmlTextReaderSetStructuredErrorHandler"
  xmlTextReaderSetup(reader.l, input.l, URL.l, encoding.l, options.l) As "_xmlTextReaderSetup"
  xmlTextReaderStandalone(reader.l) As "_xmlTextReaderStandalone"
  xmlTextReaderValue(reader.l) As "_xmlTextReaderValue"
  xmlTextReaderXmlLang(reader.l) As "_xmlTextReaderXmlLang"
  ;->xmlregexp: regular expressions handling
  xmlExpCtxtNbCons(ctxt.l) As "_xmlExpCtxtNbCons"
  xmlExpCtxtNbNodes(ctxt.l) As "_xmlExpCtxtNbNodes"
  xmlExpDump(buf.l, expr.l) As "_xmlExpDump"
  xmlExpExpDerive(ctxt.l, expr.l, sub.l) As "_xmlExpExpDerive"
  xmlExpFree(ctxt.l, exp.l) As "_xmlExpFree"
  xmlExpFreeCtxt(ctxt.l) As "_xmlExpFreeCtxt"
  xmlExpGetLanguage(ctxt.l, exp.l, langList.l, len.l) As "_xmlExpGetLanguage"
  xmlExpGetStart(ctxt.l, exp.l, tokList.l, len.l) As "_xmlExpGetStart"
  xmlExpIsNillable(exp.l) As "_xmlExpIsNillable"
  xmlExpMaxToken(expr.l) As "_xmlExpMaxToken"
  xmlExpNewAtom(ctxt.l, name.l, len.l) As "_xmlExpNewAtom"
  xmlExpNewCtxt(maxNodes.l, dict.l) As "_xmlExpNewCtxt"
  xmlExpNewOr(ctxt.l, left.l, right.l) As "_xmlExpNewOr"
  xmlExpNewRange(ctxt.l, subset.l, min.l, max.l) As "_xmlExpNewRange"
  xmlExpNewSeq(ctxt.l, left.l, right.l) As "_xmlExpNewSeq"
  xmlExpParse(ctxt.l, expr.l) As "_xmlExpParse"
  xmlExpRef(exp.l) As "_xmlExpRef"
  xmlExpStringDerive(ctxt.l, exp.l, str.l, len.l) As "_xmlExpStringDerive"
  xmlExpSubsume(ctxt.l, exp.l, sub.l) As "_xmlExpSubsume"
  xmlRegExecErrInfo(exec.l, string.l, nbval.l, nbneg.l, values.l, terminal.l) As "_xmlRegExecErrInfo"
  xmlRegExecNextValues(exec.l, nbval.l, nbneg.l, values.l, terminal.l) As "_xmlRegExecNextValues"
  xmlRegExecPushString(exec.l, value.l, data_.l) As "_xmlRegExecPushString"
  xmlRegExecPushString2(exec.l, value.l, value2.l, data_.l) As "_xmlRegExecPushString2"
  xmlRegFreeExecCtxt(exec.l) As "_xmlRegFreeExecCtxt"
  xmlRegFreeRegexp(regexp.l) As "_xmlRegFreeRegexp"
  xmlRegNewExecCtxt(comp.l, callback.l, data_.l) As "_xmlRegNewExecCtxt"
  xmlRegexpCompile(regexp.l) As "_xmlRegexpCompile"
  xmlRegexpExec(comp.l, content.l) As "_xmlRegexpExec"
  xmlRegexpIsDeterminist(comp.l) As "_xmlRegexpIsDeterminist"
  xmlRegexpPrint(output.l, regexp.l) As "_xmlRegexpPrint"
  ;->xmlsave: the XML document serializer
  xmlSaveClose(ctxt.l) As "_xmlSaveClose"
  xmlSaveDoc(ctxt.l, doc.l) As "_xmlSaveDoc"
  xmlSaveFlush(ctxt.l) As "_xmlSaveFlush"
  xmlSaveSetAttrEscape(ctxt.l, escape.l) As "_xmlSaveSetAttrEscape"
  xmlSaveSetEscape(ctxt.l, escape.l) As "_xmlSaveSetEscape"
  xmlSaveToBuffer(buffer.l, encoding.l, options.l) As "_xmlSaveToBuffer"
  xmlSaveToFd(fd.l, encoding.l, options.l) As "_xmlSaveToFd"
  xmlSaveToFilename(filename.l, encoding.l, options.l) As "_xmlSaveToFilename"
  xmlSaveToIO(iowrite.l, ioclose.l, ioctx.l, encoding.l, options.l) As "_xmlSaveToIO"
  xmlSaveTree(ctxt.l, node.l) As "_xmlSaveTree"
  ;->xmlschemas: incomplete XML Schemas Structure implementation
  xmlSchemaDump(output.l, schema.l) As "_xmlSchemaDump"
  xmlSchemaFree(schema.l) As "_xmlSchemaFree"
  xmlSchemaFreeParserCtxt(ctxt.l) As "_xmlSchemaFreeParserCtxt"
  xmlSchemaFreeValidCtxt(ctxt.l) As "_xmlSchemaFreeValidCtxt"
  xmlSchemaGetParserErrors(ctxt.l, err.l, warn.l, ctx.l) As "_xmlSchemaGetParserErrors"
  xmlSchemaGetValidErrors(ctxt.l, err.l, warn.l, ctx.l) As "_xmlSchemaGetValidErrors"
  xmlSchemaIsValid(ctxt.l) As "_xmlSchemaIsValid"
  xmlSchemaNewDocParserCtxt(doc.l) As "_xmlSchemaNewDocParserCtxt"
  xmlSchemaNewMemParserCtxt(buffer.l, size.l) As "_xmlSchemaNewMemParserCtxt"
  xmlSchemaNewParserCtxt(url.l) As "_xmlSchemaNewParserCtxt"
  xmlSchemaNewValidCtxt(schema.l) As "_xmlSchemaNewValidCtxt"
  xmlSchemaParse(ctxt.l) As "_xmlSchemaParse"
  xmlSchemaSAXPlug(ctxt.l, sax.l, user_data.l) As "_xmlSchemaSAXPlug"
  xmlSchemaSAXUnplug(plug.l) As "_xmlSchemaSAXUnplug"
  xmlSchemaSetParserErrors(ctxt.l, err.l, warn.l, ctx.l) As "_xmlSchemaSetParserErrors"
  xmlSchemaSetParserStructuredErrors(ctxt.l, serror.l, ctx.l) As "_xmlSchemaSetParserStructuredErrors"
  xmlSchemaSetValidErrors(ctxt.l, err.l, warn.l, ctx.l) As "_xmlSchemaSetValidErrors"
  xmlSchemaSetValidOptions(ctxt.l, options.l) As "_xmlSchemaSetValidOptions"
  xmlSchemaSetValidStructuredErrors(ctxt.l, serror.l, ctx.l) As "_xmlSchemaSetValidStructuredErrors"
  xmlSchemaValidCtxtGetOptions(ctxt.l) As "_xmlSchemaValidCtxtGetOptions"
  xmlSchemaValidateDoc(ctxt.l, instance.l) As "_xmlSchemaValidateDoc"
  xmlSchemaValidateFile(ctxt.l, filename.l, options.l) As "_xmlSchemaValidateFile"
  xmlSchemaValidateOneElement(ctxt.l, elem.l) As "_xmlSchemaValidateOneElement"
  xmlSchemaValidateStream(ctxt.l, input.l, enc.l, sax.l, user_data.l) As "_xmlSchemaValidateStream"
  ;->xmlschemastypes: implementation of XML Schema Datatypes
  xmlSchemaCheckFacet(facet.l, typeDecl.l, pctxt.l, name.l) As "_xmlSchemaCheckFacet"
  xmlSchemaCleanupTypes() As "_xmlSchemaCleanupTypes"
  xmlSchemaCollapseString(value.l) As "_xmlSchemaCollapseString"
  xmlSchemaCompareValues(x.l, y.l) As "_xmlSchemaCompareValues"
  xmlSchemaCompareValuesWhtsp(x.l, xws.l, y.l, yws.l) As "_xmlSchemaCompareValuesWhtsp"
  xmlSchemaCopyValue(val.l) As "_xmlSchemaCopyValue"
  xmlSchemaFreeFacet(facet.l) As "_xmlSchemaFreeFacet"
  xmlSchemaFreeValue(value.l) As "_xmlSchemaFreeValue"
  xmlSchemaGetBuiltInListSimpleTypeItemType(type.l) As "_xmlSchemaGetBuiltInListSimpleTypeItemType"
  xmlSchemaGetBuiltInType(type.l) As "_xmlSchemaGetBuiltInType"
  xmlSchemaGetCanonValue(value.l, retValue.l) As "_xmlSchemaGetCanonValue"
  xmlSchemaGetCanonValueWhtsp(value.l, retValue.l, ws.l) As "_xmlSchemaGetCanonValueWhtsp"
  xmlSchemaGetFacetValueAsULong(facet.l) As "_xmlSchemaGetFacetValueAsULong"
  xmlSchemaGetPredefinedType(name.l, ns.l) As "_xmlSchemaGetPredefinedType"
  xmlSchemaGetValType(val.l) As "_xmlSchemaGetValType"
  xmlSchemaInitTypes() As "_xmlSchemaInitTypes"
  xmlSchemaIsBuiltInTypeFacet(type.l, facetType.l) As "_xmlSchemaIsBuiltInTypeFacet"
  xmlSchemaNewFacet() As "_xmlSchemaNewFacet"
  xmlSchemaNewNOTATIONValue(name.l, ns.l) As "_xmlSchemaNewNOTATIONValue"
  xmlSchemaNewQNameValue(namespaceName.l, localName.l) As "_xmlSchemaNewQNameValue"
  xmlSchemaNewStringValue(type.l, value.l) As "_xmlSchemaNewStringValue"
  xmlSchemaValPredefTypeNode(type.l, value.l, val.l, node.l) As "_xmlSchemaValPredefTypeNode"
  xmlSchemaValPredefTypeNodeNoNorm(type.l, value.l, val.l, node.l) As "_xmlSchemaValPredefTypeNodeNoNorm"
  xmlSchemaValidateFacet(base.l, facet.l, value.l, val.l) As "_xmlSchemaValidateFacet"
  xmlSchemaValidateFacetWhtsp(facet.l, fws.l, valType.l, value.l, val.l, ws.l) As "_xmlSchemaValidateFacetWhtsp"
  xmlSchemaValidateLengthFacet(type.l, facet.l, value.l, val.l, length.l) As "_xmlSchemaValidateLengthFacet"
  xmlSchemaValidateLengthFacetWhtsp(facet.l, valType.l, value.l, val.l, length.l, ws.l) As "_xmlSchemaValidateLengthFacetWhtsp"
  xmlSchemaValidateListSimpleTypeFacet(facet.l, value.l, actualLen.l, expectedLen.l) As "_xmlSchemaValidateListSimpleTypeFacet"
  xmlSchemaValidatePredefinedType(type.l, value.l, val.l) As "_xmlSchemaValidatePredefinedType"
  xmlSchemaValueAppend(prev.l, cur.l) As "_xmlSchemaValueAppend"
  xmlSchemaValueGetAsBoolean(val.l) As "_xmlSchemaValueGetAsBoolean"
  xmlSchemaValueGetAsString(val.l) As "_xmlSchemaValueGetAsString"
  xmlSchemaValueGetNext(cur.l) As "_xmlSchemaValueGetNext"
  xmlSchemaWhiteSpaceReplace(value.l) As "_xmlSchemaWhiteSpaceReplace"
  ;->xmlstring: set of routines To process strings
  xmlCharStrdup(cur.l) As "_xmlCharStrdup"
  xmlCharStrndup(cur.l, len.l) As "_xmlCharStrndup"
  xmlCheckUTF8(utf.l) As "_xmlCheckUTF8"
  xmlGetUTF8Char(utf.l, len.l) As "_xmlGetUTF8Char"
  xmlStrEqual(str1.l, str2.l) As "_xmlStrEqual"
  xmlStrPrintf(buf.l, len.l, msg.l) As "_xmlStrPrintf"
  xmlStrQEqual(pref.l, name.l, str.l) As "_xmlStrQEqual"
  xmlStrVPrintf(buf.l, len.l, msg.l, ap.l) As "_xmlStrVPrintf"
  xmlStrcasecmp(str1.l, str2.l) As "_xmlStrcasecmp"
  xmlStrcasestr(str.l, val.l) As "_xmlStrcasestr"
  xmlStrcat(cur.l, add.l) As "_xmlStrcat"
  xmlStrchr(str.l, val.l) As "_xmlStrchr"
  xmlStrcmp(str1.l, str2.l) As "_xmlStrcmp"
  xmlStrdup(cur.l) As "_xmlStrdup"
  xmlStrlen(str.l) As "_xmlStrlen"
  xmlStrncasecmp(str1.l, str2.l, len.l) As "_xmlStrncasecmp"
  xmlStrncat(cur.l, add.l, len.l) As "_xmlStrncat"
  xmlStrncatNew(str1.l, str2.l, len.l) As "_xmlStrncatNew"
  xmlStrncmp(str1.l, str2.l, len.l) As "_xmlStrncmp"
  xmlStrndup(cur.l, len.l) As "_xmlStrndup"
  xmlStrstr(str.l, val.l) As "_xmlStrstr"
  xmlStrsub(str.l, start.l, len.l) As "_xmlStrsub"
  xmlUTF8Charcmp(utf1.l, utf2.l) As "_xmlUTF8Charcmp"
  xmlUTF8Size(utf.l) As "_xmlUTF8Size"
  xmlUTF8Strlen(utf.l) As "_xmlUTF8Strlen"
  xmlUTF8Strloc(utf.l, utfchar.l) As "_xmlUTF8Strloc"
  xmlUTF8Strndup(utf.l, len.l) As "_xmlUTF8Strndup"
  xmlUTF8Strpos(utf.l, pos.l) As "_xmlUTF8Strpos"
  xmlUTF8Strsize(utf.l, len.l) As "_xmlUTF8Strsize"
  xmlUTF8Strsub(utf.l, start.l, len.l) As "_xmlUTF8Strsub"
  ;->xmlunicode: Unicode character APIs
  xmlUCSIsAegeanNumbers(code.l) As "_xmlUCSIsAegeanNumbers"
  xmlUCSIsAlphabeticPresentationForms(code.l) As "_xmlUCSIsAlphabeticPresentationForms"
  xmlUCSIsArabic(code.l) As "_xmlUCSIsArabic"
  xmlUCSIsArabicPresentationFormsA(code.l) As "_xmlUCSIsArabicPresentationFormsA"
  xmlUCSIsArabicPresentationFormsB(code.l) As "_xmlUCSIsArabicPresentationFormsB"
  xmlUCSIsArmenian(code.l) As "_xmlUCSIsArmenian"
  xmlUCSIsArrows(code.l) As "_xmlUCSIsArrows"
  xmlUCSIsBasicLatin(code.l) As "_xmlUCSIsBasicLatin"
  xmlUCSIsBengali(code.l) As "_xmlUCSIsBengali"
  xmlUCSIsBlock(code.l, block.l) As "_xmlUCSIsBlock"
  xmlUCSIsBlockElements(code.l) As "_xmlUCSIsBlockElements"
  xmlUCSIsBopomofo(code.l) As "_xmlUCSIsBopomofo"
  xmlUCSIsBopomofoExtended(code.l) As "_xmlUCSIsBopomofoExtended"
  xmlUCSIsBoxDrawing(code.l) As "_xmlUCSIsBoxDrawing"
  xmlUCSIsBraillePatterns(code.l) As "_xmlUCSIsBraillePatterns"
  xmlUCSIsBuhid(code.l) As "_xmlUCSIsBuhid"
  xmlUCSIsByzantineMusicalSymbols(code.l) As "_xmlUCSIsByzantineMusicalSymbols"
  xmlUCSIsCJKCompatibility(code.l) As "_xmlUCSIsCJKCompatibility"
  xmlUCSIsCJKCompatibilityForms(code.l) As "_xmlUCSIsCJKCompatibilityForms"
  xmlUCSIsCJKCompatibilityIdeographs(code.l) As "_xmlUCSIsCJKCompatibilityIdeographs"
  xmlUCSIsCJKCompatibilityIdeographsSupplement(code.l) As "_xmlUCSIsCJKCompatibilityIdeographsSupplement"
  xmlUCSIsCJKRadicalsSupplement(code.l) As "_xmlUCSIsCJKRadicalsSupplement"
  xmlUCSIsCJKSymbolsandPunctuation(code.l) As "_xmlUCSIsCJKSymbolsandPunctuation"
  xmlUCSIsCJKUnifiedIdeographs(code.l) As "_xmlUCSIsCJKUnifiedIdeographs"
  xmlUCSIsCJKUnifiedIdeographsExtensionA(code.l) As "_xmlUCSIsCJKUnifiedIdeographsExtensionA"
  xmlUCSIsCJKUnifiedIdeographsExtensionB(code.l) As "_xmlUCSIsCJKUnifiedIdeographsExtensionB"
  xmlUCSIsCat(code.l, cat.l) As "_xmlUCSIsCat"
  xmlUCSIsCatC(code.l) As "_xmlUCSIsCatC"
  xmlUCSIsCatCc(code.l) As "_xmlUCSIsCatCc"
  xmlUCSIsCatCf(code.l) As "_xmlUCSIsCatCf"
  xmlUCSIsCatCo(code.l) As "_xmlUCSIsCatCo"
  xmlUCSIsCatCs(code.l) As "_xmlUCSIsCatCs"
  xmlUCSIsCatL(code.l) As "_xmlUCSIsCatL"
  xmlUCSIsCatLl(code.l) As "_xmlUCSIsCatLl"
  xmlUCSIsCatLm(code.l) As "_xmlUCSIsCatLm"
  xmlUCSIsCatLo(code.l) As "_xmlUCSIsCatLo"
  xmlUCSIsCatLt(code.l) As "_xmlUCSIsCatLt"
  xmlUCSIsCatLu(code.l) As "_xmlUCSIsCatLu"
  xmlUCSIsCatM(code.l) As "_xmlUCSIsCatM"
  xmlUCSIsCatMc(code.l) As "_xmlUCSIsCatMc"
  xmlUCSIsCatMe(code.l) As "_xmlUCSIsCatMe"
  xmlUCSIsCatMn(code.l) As "_xmlUCSIsCatMn"
  xmlUCSIsCatN(code.l) As "_xmlUCSIsCatN"
  xmlUCSIsCatNd(code.l) As "_xmlUCSIsCatNd"
  xmlUCSIsCatNl(code.l) As "_xmlUCSIsCatNl"
  xmlUCSIsCatNo(code.l) As "_xmlUCSIsCatNo"
  xmlUCSIsCatP(code.l) As "_xmlUCSIsCatP"
  xmlUCSIsCatPc(code.l) As "_xmlUCSIsCatPc"
  xmlUCSIsCatPd(code.l) As "_xmlUCSIsCatPd"
  xmlUCSIsCatPe(code.l) As "_xmlUCSIsCatPe"
  xmlUCSIsCatPf(code.l) As "_xmlUCSIsCatPf"
  xmlUCSIsCatPi(code.l) As "_xmlUCSIsCatPi"
  xmlUCSIsCatPo(code.l) As "_xmlUCSIsCatPo"
  xmlUCSIsCatPs(code.l) As "_xmlUCSIsCatPs"
  xmlUCSIsCatS(code.l) As "_xmlUCSIsCatS"
  xmlUCSIsCatSc(code.l) As "_xmlUCSIsCatSc"
  xmlUCSIsCatSk(code.l) As "_xmlUCSIsCatSk"
  xmlUCSIsCatSm(code.l) As "_xmlUCSIsCatSm"
  xmlUCSIsCatSo(code.l) As "_xmlUCSIsCatSo"
  xmlUCSIsCatZ(code.l) As "_xmlUCSIsCatZ"
  xmlUCSIsCatZl(code.l) As "_xmlUCSIsCatZl"
  xmlUCSIsCatZp(code.l) As "_xmlUCSIsCatZp"
  xmlUCSIsCatZs(code.l) As "_xmlUCSIsCatZs"
  xmlUCSIsCherokee(code.l) As "_xmlUCSIsCherokee"
  xmlUCSIsCombiningDiacriticalMarks(code.l) As "_xmlUCSIsCombiningDiacriticalMarks"
  xmlUCSIsCombiningDiacriticalMarksforSymbols(code.l) As "_xmlUCSIsCombiningDiacriticalMarksforSymbols"
  xmlUCSIsCombiningHalfMarks(code.l) As "_xmlUCSIsCombiningHalfMarks"
  xmlUCSIsCombiningMarksforSymbols(code.l) As "_xmlUCSIsCombiningMarksforSymbols"
  xmlUCSIsControlPictures(code.l) As "_xmlUCSIsControlPictures"
  xmlUCSIsCurrencySymbols(code.l) As "_xmlUCSIsCurrencySymbols"
  xmlUCSIsCypriotSyllabary(code.l) As "_xmlUCSIsCypriotSyllabary"
  xmlUCSIsCyrillic(code.l) As "_xmlUCSIsCyrillic"
  xmlUCSIsCyrillicSupplement(code.l) As "_xmlUCSIsCyrillicSupplement"
  xmlUCSIsDeseret(code.l) As "_xmlUCSIsDeseret"
  xmlUCSIsDevanagari(code.l) As "_xmlUCSIsDevanagari"
  xmlUCSIsDingbats(code.l) As "_xmlUCSIsDingbats"
  xmlUCSIsEnclosedAlphanumerics(code.l) As "_xmlUCSIsEnclosedAlphanumerics"
  xmlUCSIsEnclosedCJKLettersandMonths(code.l) As "_xmlUCSIsEnclosedCJKLettersandMonths"
  xmlUCSIsEthiopic(code.l) As "_xmlUCSIsEthiopic"
  xmlUCSIsGeneralPunctuation(code.l) As "_xmlUCSIsGeneralPunctuation"
  xmlUCSIsGeometricShapes(code.l) As "_xmlUCSIsGeometricShapes"
  xmlUCSIsGeorgian(code.l) As "_xmlUCSIsGeorgian"
  xmlUCSIsGothic(code.l) As "_xmlUCSIsGothic"
  xmlUCSIsGreek(code.l) As "_xmlUCSIsGreek"
  xmlUCSIsGreekExtended(code.l) As "_xmlUCSIsGreekExtended"
  xmlUCSIsGreekandCoptic(code.l) As "_xmlUCSIsGreekandCoptic"
  xmlUCSIsGujarati(code.l) As "_xmlUCSIsGujarati"
  xmlUCSIsGurmukhi(code.l) As "_xmlUCSIsGurmukhi"
  xmlUCSIsHalfwidthandFullwidthForms(code.l) As "_xmlUCSIsHalfwidthandFullwidthForms"
  xmlUCSIsHangulCompatibilityJamo(code.l) As "_xmlUCSIsHangulCompatibilityJamo"
  xmlUCSIsHangulJamo(code.l) As "_xmlUCSIsHangulJamo"
  xmlUCSIsHangulSyllables(code.l) As "_xmlUCSIsHangulSyllables"
  xmlUCSIsHanunoo(code.l) As "_xmlUCSIsHanunoo"
  xmlUCSIsHebrew(code.l) As "_xmlUCSIsHebrew"
  xmlUCSIsHighPrivateUseSurrogates(code.l) As "_xmlUCSIsHighPrivateUseSurrogates"
  xmlUCSIsHighSurrogates(code.l) As "_xmlUCSIsHighSurrogates"
  xmlUCSIsHiragana(code.l) As "_xmlUCSIsHiragana"
  xmlUCSIsIPAExtensions(code.l) As "_xmlUCSIsIPAExtensions"
  xmlUCSIsIdeographicDescriptionCharacters(code.l) As "_xmlUCSIsIdeographicDescriptionCharacters"
  xmlUCSIsKanbun(code.l) As "_xmlUCSIsKanbun"
  xmlUCSIsKangxiRadicals(code.l) As "_xmlUCSIsKangxiRadicals"
  xmlUCSIsKannada(code.l) As "_xmlUCSIsKannada"
  xmlUCSIsKatakana(code.l) As "_xmlUCSIsKatakana"
  xmlUCSIsKatakanaPhoneticExtensions(code.l) As "_xmlUCSIsKatakanaPhoneticExtensions"
  xmlUCSIsKhmer(code.l) As "_xmlUCSIsKhmer"
  xmlUCSIsKhmerSymbols(code.l) As "_xmlUCSIsKhmerSymbols"
  xmlUCSIsLao(code.l) As "_xmlUCSIsLao"
  xmlUCSIsLatin1Supplement(code.l) As "_xmlUCSIsLatin1Supplement"
  xmlUCSIsLatinExtendedA(code.l) As "_xmlUCSIsLatinExtendedA"
  xmlUCSIsLatinExtendedAdditional(code.l) As "_xmlUCSIsLatinExtendedAdditional"
  xmlUCSIsLatinExtendedB(code.l) As "_xmlUCSIsLatinExtendedB"
  xmlUCSIsLetterlikeSymbols(code.l) As "_xmlUCSIsLetterlikeSymbols"
  xmlUCSIsLimbu(code.l) As "_xmlUCSIsLimbu"
  xmlUCSIsLinearBIdeograms(code.l) As "_xmlUCSIsLinearBIdeograms"
  xmlUCSIsLinearBSyllabary(code.l) As "_xmlUCSIsLinearBSyllabary"
  xmlUCSIsLowSurrogates(code.l) As "_xmlUCSIsLowSurrogates"
  xmlUCSIsMalayalam(code.l) As "_xmlUCSIsMalayalam"
  xmlUCSIsMathematicalAlphanumericSymbols(code.l) As "_xmlUCSIsMathematicalAlphanumericSymbols"
  xmlUCSIsMathematicalOperators(code.l) As "_xmlUCSIsMathematicalOperators"
  xmlUCSIsMiscellaneousMathematicalSymbolsA(code.l) As "_xmlUCSIsMiscellaneousMathematicalSymbolsA"
  xmlUCSIsMiscellaneousMathematicalSymbolsB(code.l) As "_xmlUCSIsMiscellaneousMathematicalSymbolsB"
  xmlUCSIsMiscellaneousSymbols(code.l) As "_xmlUCSIsMiscellaneousSymbols"
  xmlUCSIsMiscellaneousSymbolsandArrows(code.l) As "_xmlUCSIsMiscellaneousSymbolsandArrows"
  xmlUCSIsMiscellaneousTechnical(code.l) As "_xmlUCSIsMiscellaneousTechnical"
  xmlUCSIsMongolian(code.l) As "_xmlUCSIsMongolian"
  xmlUCSIsMusicalSymbols(code.l) As "_xmlUCSIsMusicalSymbols"
  xmlUCSIsMyanmar(code.l) As "_xmlUCSIsMyanmar"
  xmlUCSIsNumberForms(code.l) As "_xmlUCSIsNumberForms"
  xmlUCSIsOgham(code.l) As "_xmlUCSIsOgham"
  xmlUCSIsOldItalic(code.l) As "_xmlUCSIsOldItalic"
  xmlUCSIsOpticalCharacterRecognition(code.l) As "_xmlUCSIsOpticalCharacterRecognition"
  xmlUCSIsOriya(code.l) As "_xmlUCSIsOriya"
  xmlUCSIsOsmanya(code.l) As "_xmlUCSIsOsmanya"
  xmlUCSIsPhoneticExtensions(code.l) As "_xmlUCSIsPhoneticExtensions"
  xmlUCSIsPrivateUse(code.l) As "_xmlUCSIsPrivateUse"
  xmlUCSIsPrivateUseArea(code.l) As "_xmlUCSIsPrivateUseArea"
  xmlUCSIsRunic(code.l) As "_xmlUCSIsRunic"
  xmlUCSIsShavian(code.l) As "_xmlUCSIsShavian"
  xmlUCSIsSinhala(code.l) As "_xmlUCSIsSinhala"
  xmlUCSIsSmallFormVariants(code.l) As "_xmlUCSIsSmallFormVariants"
  xmlUCSIsSpacingModifierLetters(code.l) As "_xmlUCSIsSpacingModifierLetters"
  xmlUCSIsSpecials(code.l) As "_xmlUCSIsSpecials"
  xmlUCSIsSuperscriptsandSubscripts(code.l) As "_xmlUCSIsSuperscriptsandSubscripts"
  xmlUCSIsSupplementalArrowsA(code.l) As "_xmlUCSIsSupplementalArrowsA"
  xmlUCSIsSupplementalArrowsB(code.l) As "_xmlUCSIsSupplementalArrowsB"
  xmlUCSIsSupplementalMathematicalOperators(code.l) As "_xmlUCSIsSupplementalMathematicalOperators"
  xmlUCSIsSupplementaryPrivateUseAreaA(code.l) As "_xmlUCSIsSupplementaryPrivateUseAreaA"
  xmlUCSIsSupplementaryPrivateUseAreaB(code.l) As "_xmlUCSIsSupplementaryPrivateUseAreaB"
  xmlUCSIsSyriac(code.l) As "_xmlUCSIsSyriac"
  xmlUCSIsTagalog(code.l) As "_xmlUCSIsTagalog"
  xmlUCSIsTagbanwa(code.l) As "_xmlUCSIsTagbanwa"
  xmlUCSIsTags(code.l) As "_xmlUCSIsTags"
  xmlUCSIsTaiLe(code.l) As "_xmlUCSIsTaiLe"
  xmlUCSIsTaiXuanJingSymbols(code.l) As "_xmlUCSIsTaiXuanJingSymbols"
  xmlUCSIsTamil(code.l) As "_xmlUCSIsTamil"
  xmlUCSIsTelugu(code.l) As "_xmlUCSIsTelugu"
  xmlUCSIsThaana(code.l) As "_xmlUCSIsThaana"
  xmlUCSIsThai(code.l) As "_xmlUCSIsThai"
  xmlUCSIsTibetan(code.l) As "_xmlUCSIsTibetan"
  xmlUCSIsUgaritic(code.l) As "_xmlUCSIsUgaritic"
  xmlUCSIsUnifiedCanadianAboriginalSyllabics(code.l) As "_xmlUCSIsUnifiedCanadianAboriginalSyllabics"
  xmlUCSIsVariationSelectors(code.l) As "_xmlUCSIsVariationSelectors"
  xmlUCSIsVariationSelectorsSupplement(code.l) As "_xmlUCSIsVariationSelectorsSupplement"
  xmlUCSIsYiRadicals(code.l) As "_xmlUCSIsYiRadicals"
  xmlUCSIsYiSyllables(code.l) As "_xmlUCSIsYiSyllables"
  xmlUCSIsYijingHexagramSymbols(code.l) As "_xmlUCSIsYijingHexagramSymbols"
  ;->xmlversion: compile-time version informations
  xmlCheckVersion(version.l) As "_xmlCheckVersion"
  ;->xmlwriter: text writing API For XML
  xmlFreeTextWriter(writer.l) As "_xmlFreeTextWriter"
  xmlNewTextWriter(out.l) As "_xmlNewTextWriter"
  xmlNewTextWriterDoc(doc.l, compression.l) As "_xmlNewTextWriterDoc"
  xmlNewTextWriterFilename(uri.l, compression.l) As "_xmlNewTextWriterFilename"
  xmlNewTextWriterMemory(buf.l, compression.l) As "_xmlNewTextWriterMemory"
  xmlNewTextWriterPushParser(ctxt.l, compression.l) As "_xmlNewTextWriterPushParser"
  xmlNewTextWriterTree(doc.l, node.l, compression.l) As "_xmlNewTextWriterTree"
  xmlTextWriterEndAttribute(writer.l) As "_xmlTextWriterEndAttribute"
  xmlTextWriterEndCDATA(writer.l) As "_xmlTextWriterEndCDATA"
  xmlTextWriterEndComment(writer.l) As "_xmlTextWriterEndComment"
  xmlTextWriterEndDTD(writer.l) As "_xmlTextWriterEndDTD"
  xmlTextWriterEndDTDAttlist(writer.l) As "_xmlTextWriterEndDTDAttlist"
  xmlTextWriterEndDTDElement(writer.l) As "_xmlTextWriterEndDTDElement"
  xmlTextWriterEndDTDEntity(writer.l) As "_xmlTextWriterEndDTDEntity"
  xmlTextWriterEndDocument(writer.l) As "_xmlTextWriterEndDocument"
  xmlTextWriterEndElement(writer.l) As "_xmlTextWriterEndElement"
  xmlTextWriterEndPI(writer.l) As "_xmlTextWriterEndPI"
  xmlTextWriterFlush(writer.l) As "_xmlTextWriterFlush"
  xmlTextWriterFullEndElement(writer.l) As "_xmlTextWriterFullEndElement"
  xmlTextWriterSetIndent(writer.l, indent.l) As "_xmlTextWriterSetIndent"
  xmlTextWriterSetIndentString(writer.l, str.l) As "_xmlTextWriterSetIndentString"
  xmlTextWriterStartAttribute(writer.l, name.l) As "_xmlTextWriterStartAttribute"
  xmlTextWriterStartAttributeNS(writer.l, prefix.l, name.l, namespacesURI.l) As "_xmlTextWriterStartAttributeNS"
  xmlTextWriterStartCDATA(writer.l) As "_xmlTextWriterStartCDATA"
  xmlTextWriterStartComment(writer.l) As "_xmlTextWriterStartComment"
  xmlTextWriterStartDTD(writer.l, name.l, pubid.l, sysid.l) As "_xmlTextWriterStartDTD"
  xmlTextWriterStartDTDAttlist(writer.l, name.l) As "_xmlTextWriterStartDTDAttlist"
  xmlTextWriterStartDTDElement(writer.l, name.l) As "_xmlTextWriterStartDTDElement"
  xmlTextWriterStartDTDEntity(writer.l, pe.l, name.l) As "_xmlTextWriterStartDTDEntity"
  xmlTextWriterStartDocument(writer.l, version.l, encoding.l, standalone.l) As "_xmlTextWriterStartDocument"
  xmlTextWriterStartElement(writer.l, name.l) As "_xmlTextWriterStartElement"
  xmlTextWriterStartElementNS(writer.l, prefix.l, name.l, namespacesURI.l) As "_xmlTextWriterStartElementNS"
  xmlTextWriterStartPI(writer.l, target.l) As "_xmlTextWriterStartPI"
  xmlTextWriterWriteAttribute(writer.l, name.l, content.l) As "_xmlTextWriterWriteAttribute"
  xmlTextWriterWriteAttributeNS(writer.l, prefix.l, name.l, namespacesURI.l, content.l) As "_xmlTextWriterWriteAttributeNS"
  xmlTextWriterWriteBase64(writer.l, data_.l, start.l, len.l) As "_xmlTextWriterWriteBase64"
  xmlTextWriterWriteBinHex(writer.l, data_.l, start.l, len.l) As "_xmlTextWriterWriteBinHex"
  xmlTextWriterWriteCDATA(writer.l, content.l) As "_xmlTextWriterWriteCDATA"
  xmlTextWriterWriteComment(writer.l, content.l) As "_xmlTextWriterWriteComment"
  xmlTextWriterWriteDTD(writer.l, name.l, pubid.l, sysid.l, subset.l) As "_xmlTextWriterWriteDTD"
  xmlTextWriterWriteDTDAttlist(writer.l, name.l, content.l) As "_xmlTextWriterWriteDTDAttlist"
  xmlTextWriterWriteDTDElement(writer.l, name.l, content.l) As "_xmlTextWriterWriteDTDElement"
  xmlTextWriterWriteDTDEntity(writer.l, pe.l, name.l, pubid.l, sysid.l, ndataid.l, content.l) As "_xmlTextWriterWriteDTDEntity"
  xmlTextWriterWriteDTDExternalEntity(writer.l, pe.l, name.l, pubid.l, sysid.l, ndataid.l) As "_xmlTextWriterWriteDTDExternalEntity"
  xmlTextWriterWriteDTDExternalEntityContents(writer.l, pubid.l, sysid.l, ndataid.l) As "_xmlTextWriterWriteDTDExternalEntityContents"
  xmlTextWriterWriteDTDInternalEntity(writer.l, pe.l, name.l, content.l) As "_xmlTextWriterWriteDTDInternalEntity"
  xmlTextWriterWriteDTDNotation(writer.l, name.l, pubid.l, sysid.l) As "_xmlTextWriterWriteDTDNotation"
  xmlTextWriterWriteElement(writer.l, name.l, content.l) As "_xmlTextWriterWriteElement"
  xmlTextWriterWriteElementNS(writer.l, prefix.l, name.l, namespacesURI.l, content.l) As "_xmlTextWriterWriteElementNS"
  xmlTextWriterWriteFormatAttribute(writer.l, name.l, format.l) As "_xmlTextWriterWriteFormatAttribute"
  xmlTextWriterWriteFormatAttributeNS(writer.l, prefix.l, name.l, namespacesURI.l, format.l) As "_xmlTextWriterWriteFormatAttributeNS"
  xmlTextWriterWriteFormatCDATA(writer.l, format.l) As "_xmlTextWriterWriteFormatCDATA"
  xmlTextWriterWriteFormatComment(writer.l, format.l) As "_xmlTextWriterWriteFormatComment"
  xmlTextWriterWriteFormatDTD(writer.l, name.l, pubid.l, sysid.l, format.l) As "_xmlTextWriterWriteFormatDTD"
  xmlTextWriterWriteFormatDTDAttlist(writer.l, name.l, format.l) As "_xmlTextWriterWriteFormatDTDAttlist"
  xmlTextWriterWriteFormatDTDElement(writer.l, name.l, format.l) As "_xmlTextWriterWriteFormatDTDElement"
  xmlTextWriterWriteFormatDTDInternalEntity(writer.l, pe.l, name.l, format.l) As "_xmlTextWriterWriteFormatDTDInternalEntity"
  xmlTextWriterWriteFormatElement(writer.l, name.l, format.l) As "_xmlTextWriterWriteFormatElement"
  xmlTextWriterWriteFormatElementNS(writer.l, prefix.l, name.l, namespacesURI.l, format.l) As "_xmlTextWriterWriteFormatElementNS"
  xmlTextWriterWriteFormatPI(writer.l, target.l, format.l) As "_xmlTextWriterWriteFormatPI"
  xmlTextWriterWriteFormatRaw(writer.l, format.l) As "_xmlTextWriterWriteFormatRaw"
  xmlTextWriterWriteFormatString(writer.l, format.l) As "_xmlTextWriterWriteFormatString"
  xmlTextWriterWritePI(writer.l, target.l, content.l) As "_xmlTextWriterWritePI"
  xmlTextWriterWriteRaw(writer.l, content.l) As "_xmlTextWriterWriteRaw"
  xmlTextWriterWriteRawLen(writer.l, content.l, len.l) As "_xmlTextWriterWriteRawLen"
  xmlTextWriterWriteString(writer.l, content.l) As "_xmlTextWriterWriteString"
  xmlTextWriterWriteVFormatAttribute(writer.l, name.l, format.l, argptr.l) As "_xmlTextWriterWriteVFormatAttribute"
  xmlTextWriterWriteVFormatAttributeNS(writer.l, prefix.l, name.l, namespacesURI.l, format.l, argptr.l) As "_xmlTextWriterWriteVFormatAttributeNS"
  xmlTextWriterWriteVFormatCDATA(writer.l, format.l, argptr.l) As "_xmlTextWriterWriteVFormatCDATA"
  xmlTextWriterWriteVFormatComment(writer.l, format.l, argptr.l) As "_xmlTextWriterWriteVFormatComment"
  xmlTextWriterWriteVFormatDTD(writer.l, name.l, pubid.l, sysid.l, format.l, argptr.l) As "_xmlTextWriterWriteVFormatDTD"
  xmlTextWriterWriteVFormatDTDAttlist(writer.l, name.l, format.l, argptr.l) As "_xmlTextWriterWriteVFormatDTDAttlist"
  xmlTextWriterWriteVFormatDTDElement(writer.l, name.l, format.l, argptr) As "_xmlTextWriterWriteVFormatDTDElement"
  xmlTextWriterWriteVFormatDTDInternalEntity(writer.l, pe.l, name.l, format.l, argptr) As "_xmlTextWriterWriteVFormatDTDInternalEntity"
  xmlTextWriterWriteVFormatElement(writer.l, name.l, format.l, argptr) As "_xmlTextWriterWriteVFormatElement"
  xmlTextWriterWriteVFormatElementNS(writer.l, prefix.l, name.l, namespacesURI.l, format.l, argptr) As "_xmlTextWriterWriteVFormatElementNS"
  xmlTextWriterWriteVFormatPI(writer.l, target.l, format.l, argptr) As "_xmlTextWriterWriteVFormatPI"
  xmlTextWriterWriteVFormatRaw(writer.l, format.l, argptr) As "_xmlTextWriterWriteVFormatRaw"
  xmlTextWriterWriteVFormatString(writer.l, format.l, argptr) As "_xmlTextWriterWriteVFormatString"
  ;->xpath: XML Path Language implementation
  xmlXPathCastBooleanToNumber.d(val.l) As "_xmlXPathCastBooleanToNumber"
  xmlXPathCastBooleanToString(val.l) As "_xmlXPathCastBooleanToString"
  xmlXPathCastNodeSetToBoolean(ns.l) As "_xmlXPathCastNodeSetToBoolean"
  xmlXPathCastNodeSetToNumber.d(ns.l) As "_xmlXPathCastNodeSetToNumber"
  xmlXPathCastNodeSetToString(ns.l) As "_xmlXPathCastNodeSetToString"
  xmlXPathCastNodeToNumber.d(node.l) As "_xmlXPathCastNodeToNumber"
  xmlXPathCastNodeToString(node.l) As "_xmlXPathCastNodeToString"
  xmlXPathCastNumberToBoolean(val.d) As "_xmlXPathCastNumberToBoolean"
  xmlXPathCastNumberToString(val.d) As "_xmlXPathCastNumberToString"
  xmlXPathCastStringToBoolean(val.l) As "_xmlXPathCastStringToBoolean"
  xmlXPathCastStringToNumber.d(val.l) As "_xmlXPathCastStringToNumber"
  xmlXPathCastToBoolean(val.l) As "_xmlXPathCastToBoolean"
  xmlXPathCastToNumber.d(val.l) As "_xmlXPathCastToNumber"
  xmlXPathCastToString(val.l) As "_xmlXPathCastToString"
  xmlXPathCmpNodes(node1.l, node2.l) As "_xmlXPathCmpNodes"
  xmlXPathCompile(str.l) As "_xmlXPathCompile"
  xmlXPathCompiledEval(comp.l, ctx.l) As "_xmlXPathCompiledEval"
  xmlXPathCompiledEvalToBoolean(comp.l, ctx.l) As "_xmlXPathCompiledEvalToBoolean"
  xmlXPathContextSetCache(ctxt.l, active.l, value.l, options.l) As "_xmlXPathContextSetCache"
  xmlXPathConvertBoolean(val.l) As "_xmlXPathConvertBoolean"
  xmlXPathConvertNumber(val.l) As "_xmlXPathConvertNumber"
  xmlXPathConvertString(val.l) As "_xmlXPathConvertString"
  xmlXPathCtxtCompile(ctxt.l, str.l) As "_xmlXPathCtxtCompile"
  xmlXPathEval(str.l, ctx.l) As "_xmlXPathEval"
  xmlXPathEvalExpression(str.l, ctxt.l) As "_xmlXPathEvalExpression"
  xmlXPathEvalPredicate(ctxt.l, res.l) As "_xmlXPathEvalPredicate"
  xmlXPathFreeCompExpr(comp.l) As "_xmlXPathFreeCompExpr"
  xmlXPathFreeContext(ctxt.l) As "_xmlXPathFreeContext"
  xmlXPathFreeNodeSet(obj.l) As "_xmlXPathFreeNodeSet"
  xmlXPathFreeNodeSetList(obj.l) As "_xmlXPathFreeNodeSetList"
  xmlXPathFreeObject(obj.l) As "_xmlXPathFreeObject"
  xmlXPathInit() As "_xmlXPathInit"
  xmlXPathIsInf(val.d) As "_xmlXPathIsInf"
  xmlXPathIsNaN(val.d) As "_xmlXPathIsNaN"
  xmlXPathNewContext(doc.l) As "_xmlXPathNewContext"
  xmlXPathNodeSetCreate(val.l) As "_xmlXPathNodeSetCreate"
  xmlXPathObjectCopy(val.l) As "_xmlXPathObjectCopy"
  xmlXPathOrderDocElems(doc.l) As "_xmlXPathOrderDocElems"
  ;->xpathInternals: internal interfaces For XML Path Language implementation
  valuePop(ctxt.l) As "_valuePop"
  valuePush(ctxt.l, value.l) As "_valuePush"
  xmlXPathAddValues(ctxt.l) As "_xmlXPathAddValues"
  xmlXPathBooleanFunction(ctxt.l, nargs.l) As "_xmlXPathBooleanFunction"
  xmlXPathCeilingFunction(ctxt.l, nargs.l) As "_xmlXPathCeilingFunction"
  xmlXPathCompareValues(ctxt.l, inf.l, strict.l) As "_xmlXPathCompareValues"
  xmlXPathConcatFunction(ctxt.l, nargs.l) As "_xmlXPathConcatFunction"
  xmlXPathContainsFunction(ctxt.l, nargs.l) As "_xmlXPathContainsFunction"
  xmlXPathCountFunction(ctxt.l, nargs.l) As "_xmlXPathCountFunction"
  xmlXPathDebugDumpCompExpr(output.l, comp.l, depth.l) As "_xmlXPathDebugDumpCompExpr"
  xmlXPathDebugDumpObject(output.l, cur.l, depth.l) As "_xmlXPathDebugDumpObject"
  xmlXPathDifference(nodes1.l, nodes2.l) As "_xmlXPathDifference"
  xmlXPathDistinct(nodes.l) As "_xmlXPathDistinct"
  xmlXPathDistinctSorted(nodes.l) As "_xmlXPathDistinctSorted"
  xmlXPathDivValues(ctxt.l) As "_xmlXPathDivValues"
  xmlXPathEqualValues(ctxt.l) As "_xmlXPathEqualValues"
  xmlXPathErr(ctxt.l, error.l) As "_xmlXPathErr"
  xmlXPathEvalExpr(ctxt.l) As "_xmlXPathEvalExpr"
  xmlXPathEvaluatePredicateResult(ctxt.l, res.l) As "_xmlXPathEvaluatePredicateResult"
  xmlXPathFalseFunction(ctxt.l, nargs.l) As "_xmlXPathFalseFunction"
  xmlXPathFloorFunction(ctxt.l, nargs.l) As "_xmlXPathFloorFunction"
  xmlXPathFreeParserContext(ctxt.l) As "_xmlXPathFreeParserContext"
  xmlXPathFunctionLookup(ctxt.l, name.l) As "_xmlXPathFunctionLookup"
  xmlXPathFunctionLookupNS(ctxt.l, name.l, ns_uri.l) As "_xmlXPathFunctionLookupNS"
  xmlXPathHasSameNodes(nodes1.l, nodes2.l) As "_xmlXPathHasSameNodes"
  xmlXPathIdFunction(ctxt.l, nargs.l) As "_xmlXPathIdFunction"
  xmlXPathIntersection(nodes1.l, nodes2.l) As "_xmlXPathIntersection"
  xmlXPathIsNodeType(name.l) As "_xmlXPathIsNodeType"
  xmlXPathLangFunction(ctxt.l, nargs.l) As "_xmlXPathLangFunction"
  xmlXPathLastFunction(ctxt.l, nargs.l) As "_xmlXPathLastFunction"
  xmlXPathLeading(nodes1.l, nodes2.l) As "_xmlXPathLeading"
  xmlXPathLeadingSorted(nodes1.l, nodes2.l) As "_xmlXPathLeadingSorted"
  xmlXPathLocalNameFunction(ctxt.l, nargs.l) As "_xmlXPathLocalNameFunction"
  xmlXPathModValues(ctxt.l) As "_xmlXPathModValues"
  xmlXPathMultValues(ctxt.l) As "_xmlXPathMultValues"
  xmlXPathNamespaceURIFunction(ctxt.l, nargs.l) As "_xmlXPathNamespaceURIFunction"
  xmlXPathNewBoolean(val.l) As "_xmlXPathNewBoolean"
  xmlXPathNewCString(val.l) As "_xmlXPathNewCString"
  xmlXPathNewFloat(val.d) As "_xmlXPathNewFloat"
  xmlXPathNewNodeSet(val.l) As "_xmlXPathNewNodeSet"
  xmlXPathNewNodeSetList(val.l) As "_xmlXPathNewNodeSetList"
  xmlXPathNewParserContext(str.l, ctxt.l) As "_xmlXPathNewParserContext"
  xmlXPathNewString(val.l) As "_xmlXPathNewString"
  xmlXPathNewValueTree(val.l) As "_xmlXPathNewValueTree"
  xmlXPathNextAncestor(ctxt.l, cur.l) As "_xmlXPathNextAncestor"
  xmlXPathNextAncestorOrSelf(ctxt.l, cur.l) As "_xmlXPathNextAncestorOrSelf"
  xmlXPathNextAttribute(ctxt.l, cur.l) As "_xmlXPathNextAttribute"
  xmlXPathNextChild(ctxt.l, cur.l) As "_xmlXPathNextChild"
  xmlXPathNextDescendant(ctxt.l, cur.l) As "_xmlXPathNextDescendant"
  xmlXPathNextDescendantOrSelf(ctxt.l, cur.l) As "_xmlXPathNextDescendantOrSelf"
  xmlXPathNextFollowing(ctxt.l, cur.l) As "_xmlXPathNextFollowing"
  xmlXPathNextFollowingSibling(ctxt.l, cur.l) As "_xmlXPathNextFollowingSibling"
  xmlXPathNextNamespace(ctxt.l, cur.l) As "_xmlXPathNextNamespace"
  xmlXPathNextParent(ctxt.l, cur.l) As "_xmlXPathNextParent"
  xmlXPathNextPreceding(ctxt.l, cur.l) As "_xmlXPathNextPreceding"
  xmlXPathNextPrecedingSibling(ctxt.l, cur.l) As "_xmlXPathNextPrecedingSibling"
  xmlXPathNextSelf(ctxt.l, cur.l) As "_xmlXPathNextSelf"
  xmlXPathNodeLeading(nodes.l, node.l) As "_xmlXPathNodeLeading"
  xmlXPathNodeLeadingSorted(nodes.l, node.l) As "_xmlXPathNodeLeadingSorted"
  xmlXPathNodeSetAdd(cur.l, val.l) As "_xmlXPathNodeSetAdd"
  xmlXPathNodeSetAddNs(cur.l, node.l, ns.l) As "_xmlXPathNodeSetAddNs"
  xmlXPathNodeSetAddUnique(cur.l, val.l) As "_xmlXPathNodeSetAddUnique"
  xmlXPathNodeSetContains(cur.l, val.l) As "_xmlXPathNodeSetContains"
  xmlXPathNodeSetDel(cur.l, val.l) As "_xmlXPathNodeSetDel"
  xmlXPathNodeSetFreeNs(ns.l) As "_xmlXPathNodeSetFreeNs"
  xmlXPathNodeSetMerge(val1.l, val2.l) As "_xmlXPathNodeSetMerge"
  xmlXPathNodeSetRemove(cur.l, val.l) As "_xmlXPathNodeSetRemove"
  xmlXPathNodeSetSort(set.l) As "_xmlXPathNodeSetSort"
  xmlXPathNodeTrailing(nodes.l, node.l) As "_xmlXPathNodeTrailing"
  xmlXPathNodeTrailingSorted(nodes.l, node.l) As "_xmlXPathNodeTrailingSorted"
  xmlXPathNormalizeFunction(ctxt.l, nargs.l) As "_xmlXPathNormalizeFunction"
  xmlXPathNotEqualValues(ctxt.l) As "_xmlXPathNotEqualValues"
  xmlXPathNotFunction(ctxt.l, nargs.l) As "_xmlXPathNotFunction"
  xmlXPathNsLookup(ctxt.l, prefix.l) As "_xmlXPathNsLookup"
  xmlXPathNumberFunction(ctxt.l, nargs.l) As "_xmlXPathNumberFunction"
  xmlXPathParseNCName(ctxt.l) As "_xmlXPathParseNCName"
  xmlXPathParseName(ctxt.l) As "_xmlXPathParseName"
  xmlXPathPopBoolean(ctxt.l) As "_xmlXPathPopBoolean"
  xmlXPathPopExternal(ctxt.l) As "_xmlXPathPopExternal"
  xmlXPathPopNodeSet(ctxt.l) As "_xmlXPathPopNodeSet"
  xmlXPathPopNumber.d(ctxt.l) As "_xmlXPathPopNumber"
  xmlXPathPopString(ctxt.l) As "_xmlXPathPopString"
  xmlXPathPositionFunction(ctxt.l, nargs.l) As "_xmlXPathPositionFunction"
  xmlXPathRegisterAllFunctions(ctxt.l) As "_xmlXPathRegisterAllFunctions"
  xmlXPathRegisterFunc(ctxt.l, name.l, f.l) As "_xmlXPathRegisterFunc"
  xmlXPathRegisterFuncLookup(ctxt.l, f.l, funcCtxt.l) As "_xmlXPathRegisterFuncLookup"
  xmlXPathRegisterFuncNS(ctxt.l, name.l, ns_uri.l, f.l) As "_xmlXPathRegisterFuncNS"
  xmlXPathRegisterNs(ctxt.l, prefix.l, ns_uri.l) As "_xmlXPathRegisterNs"
  xmlXPathRegisterVariable(ctxt.l, name.l, value.l) As "_xmlXPathRegisterVariable"
  xmlXPathRegisterVariableLookup(ctxt.l, f.l, data_.l) As "_xmlXPathRegisterVariableLookup"
  xmlXPathRegisterVariableNS(ctxt.l, name.l, ns_uri.l, value.l) As "_xmlXPathRegisterVariableNS"
  xmlXPathRegisteredFuncsCleanup(ctxt.l) As "_xmlXPathRegisteredFuncsCleanup"
  xmlXPathRegisteredNsCleanup(ctxt.l) As "_xmlXPathRegisteredNsCleanup"
  xmlXPathRegisteredVariablesCleanup(ctxt.l) As "_xmlXPathRegisteredVariablesCleanup"
  xmlXPathRoot(ctxt.l) As "_xmlXPathRoot"
  xmlXPathRoundFunction(ctxt.l, nargs.l) As "_xmlXPathRoundFunction"
  xmlXPathStartsWithFunction(ctxt.l, nargs.l) As "_xmlXPathStartsWithFunction"
  xmlXPathStringEvalNumber.d(str.l) As "_xmlXPathStringEvalNumber"
  xmlXPathStringFunction(ctxt.l, nargs.l) As "_xmlXPathStringFunction"
  xmlXPathStringLengthFunction(ctxt.l, nargs.l) As "_xmlXPathStringLengthFunction"
  xmlXPathSubValues(ctxt.l) As "_xmlXPathSubValues"
  xmlXPathSubstringAfterFunction(ctxt.l, nargs.l) As "_xmlXPathSubstringAfterFunction"
  xmlXPathSubstringBeforeFunction(ctxt.l, nargs.l) As "_xmlXPathSubstringBeforeFunction"
  xmlXPathSubstringFunction(ctxt.l, nargs.l) As "_xmlXPathSubstringFunction"
  xmlXPathSumFunction(ctxt.l, nargs.l) As "_xmlXPathSumFunction"
  xmlXPathTrailing(nodes1.l, nodes2.l) As "_xmlXPathTrailing"
  xmlXPathTrailingSorted(nodes1.l, nodes2.l) As "_xmlXPathTrailingSorted"
  xmlXPathTranslateFunction(ctxt.l, nargs.l) As "_xmlXPathTranslateFunction"
  xmlXPathTrueFunction(ctxt.l, nargs.l) As "_xmlXPathTrueFunction"
  xmlXPathValueFlipSign(ctxt.l) As "_xmlXPathValueFlipSign"
  xmlXPathVariableLookup(ctxt.l, name.l) As "_xmlXPathVariableLookup"
  xmlXPathVariableLookupNS(ctxt.l, name.l, ns_uri.l) As "_xmlXPathVariableLookupNS"
  xmlXPathWrapCString(val.l) As "_xmlXPathWrapCString"
  xmlXPathWrapExternal(val.l) As "_xmlXPathWrapExternal"
  xmlXPathWrapNodeSet(val.l) As "_xmlXPathWrapNodeSet"
  xmlXPathWrapString(val.l) As "_xmlXPathWrapString"
  xmlXPatherror(ctxt.l, file.l, line.l, no.l) As "_xmlXPatherror"
  ;->xpointer: API To handle XML Pointers
  xmlXPtrBuildNodeList(obj.l) As "_xmlXPtrBuildNodeList"
  xmlXPtrEval(str.l, ctx.l) As "_xmlXPtrEval"
  xmlXPtrEvalRangePredicate(ctxt.l) As "_xmlXPtrEvalRangePredicate"
  xmlXPtrFreeLocationSet(obj.l) As "_xmlXPtrFreeLocationSet"
  xmlXPtrLocationSetAdd(cur.l, val.l) As "_xmlXPtrLocationSetAdd"
  xmlXPtrLocationSetCreate(val.l) As "_xmlXPtrLocationSetCreate"
  xmlXPtrLocationSetDel(cur.l, val.l) As "_xmlXPtrLocationSetDel"
  xmlXPtrLocationSetMerge(val1.l, val2.l) As "_xmlXPtrLocationSetMerge"
  xmlXPtrLocationSetRemove(cur.l, val.l) As "_xmlXPtrLocationSetRemove"
  xmlXPtrNewCollapsedRange(start.l) As "_xmlXPtrNewCollapsedRange"
  xmlXPtrNewContext(doc.l, here.l, origin.l) As "_xmlXPtrNewContext"
  xmlXPtrNewLocationSetNodeSet(set.l) As "_xmlXPtrNewLocationSetNodeSet"
  xmlXPtrNewLocationSetNodes(start.l, end_.l) As "_xmlXPtrNewLocationSetNodes"
  xmlXPtrNewRange(start.l, startindex.l, end_.l, endindex.l) As "_xmlXPtrNewRange"
  xmlXPtrNewRangeNodeObject(start.l, end_.l) As "_xmlXPtrNewRangeNodeObject"
  xmlXPtrNewRangeNodePoint(start.l, end_.l) As "_xmlXPtrNewRangeNodePoint"
  xmlXPtrNewRangeNodes(start.l, end_.l) As "_xmlXPtrNewRangeNodes"
  xmlXPtrNewRangePointNode(start.l, end_.l) As "_xmlXPtrNewRangePointNode"
  xmlXPtrNewRangePoints(start.l, end_.l) As "_xmlXPtrNewRangePoints"
  xmlXPtrRangeToFunction(ctxt.l, nargs.l) As "_xmlXPtrRangeToFunction"
  xmlXPtrWrapLocationSet(val.l) As "_xmlXPtrWrapLocationSet"
  ;-> !!xmlGlobalState!! function or function ptr
  docbDefaultSAXHandler() As "___docbDefaultSAXHandler"
  htmlDefaultSAXHandler() As "___htmlDefaultSAXHandler"
  oldXMLWDcompatibility() As "___oldXMLWDcompatibility"
  xmlBufferAllocScheme() As "___xmlBufferAllocScheme"
  xmlDefaultBufferSize() As "___xmlDefaultBufferSize"
  xmlDefaultSAXHandler() As "___xmlDefaultSAXHandler"
  xmlDefaultSAXLocator() As "___xmlDefaultSAXLocator"
  xmlDeregisterNodeDefaultValue() As "___xmlDeregisterNodeDefaultValue"
  xmlDoValidityCheckingDefaultValue() As "___xmlDoValidityCheckingDefaultValue"
  xmlErrEncoding() As "___xmlErrEncoding"
  xmlGenericError() As "___xmlGenericError"
  xmlGenericErrorContext() As "___xmlGenericErrorContext"
  xmlGetWarningsDefaultValue() As "___xmlGetWarningsDefaultValue"
  xmlIndentTreeOutput() As "___xmlIndentTreeOutput"
  xmlKeepBlanksDefaultValue() As "___xmlKeepBlanksDefaultValue"
  xmlLastError() As "___xmlLastError"
  xmlLineNumbersDefaultValue() As "___xmlLineNumbersDefaultValue"
  xmlLoadExtDtdDefaultValue() As "___xmlLoadExtDtdDefaultValue"
  xmlOutputBufferCreateFilenameValue() As "___xmlOutputBufferCreateFilenameValue"
  xmlParserDebugEntities() As "___xmlParserDebugEntities"
  xmlParserInputBufferCreateFilenameValue() As "___xmlParserInputBufferCreateFilenameValue"
  xmlParserVersion() As "___xmlParserVersion"
  xmlPedanticParserDefaultValue() As "___xmlPedanticParserDefaultValue"
  xmlRaiseError() As "___xmlRaiseError"
  xmlRegisterNodeDefaultValue() As "___xmlRegisterNodeDefaultValue"
  xmlSaveNoEmptyTags() As "___xmlSaveNoEmptyTags"
  xmlSimpleError() As "___xmlSimpleError"
  xmlStructuredError() As "___xmlStructuredError"
  xmlSubstituteEntitiesDefaultValue() As "___xmlSubstituteEntitiesDefaultValue"
  xmlTreeIndentString() As "___xmlTreeIndentString"
EndImport
  
; IDE Options = PureBasic 4.10 (Windows - x86)
; CursorPosition = 1676
; Folding = +